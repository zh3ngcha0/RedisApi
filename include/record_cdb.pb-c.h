/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: record_cdb.proto */

#ifndef PROTOBUF_C_record_5fcdb_2eproto__INCLUDED
#define PROTOBUF_C_record_5fcdb_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CdbVnfHaMonitorTarget CdbVnfHaMonitorTarget;
typedef struct _CdbVnfHaMonitorMember CdbVnfHaMonitorMember;
typedef struct _CdbVnfHaMonitorGroup CdbVnfHaMonitorGroup;
typedef struct _CdbVnfHaMonitorMemberGroup CdbVnfHaMonitorMemberGroup;
typedef struct _CdbVnfHa CdbVnfHa;
typedef struct _CdbWagRadiusIntfOrigIf CdbWagRadiusIntfOrigIf;
typedef struct _CdbWagRadiusIntfPeer CdbWagRadiusIntfPeer;
typedef struct _CdbWagRadiusIntf CdbWagRadiusIntf;
typedef struct _CdbWifissidEp CdbWifissidEp;
typedef struct _CdbWifissid CdbWifissid;
typedef struct _CdbWifiAuthorProfile CdbWifiAuthorProfile;
typedef struct _CdbWifiAuthenProfile CdbWifiAuthenProfile;
typedef struct _CdbWifiAcctProfile CdbWifiAcctProfile;
typedef struct _CdbWifiKeyIdMap CdbWifiKeyIdMap;
typedef struct _CdbWifiGlobalKeyIdMap CdbWifiGlobalKeyIdMap;
typedef struct _CdbWifiKeyIdMapSsidName CdbWifiKeyIdMapSsidName;
typedef struct _CdbWifiKeyIdMapSsidId CdbWifiKeyIdMapSsidId;
typedef struct _CdbWifiKeyIdMapIntfName CdbWifiKeyIdMapIntfName;
typedef struct _CdbWifiKeyIdMapIntfId CdbWifiKeyIdMapIntfId;
typedef struct _CdbCgnatInitQamIpQuota CdbCgnatInitQamIpQuota;
typedef struct _CdbCgnatProfileKey CdbCgnatProfileKey;
typedef struct _CdbCgnatIpPoolKey CdbCgnatIpPoolKey;
typedef struct _CdbCgnatGlobalConfig CdbCgnatGlobalConfig;
typedef struct _CdbCgnatTypeInt CdbCgnatTypeInt;
typedef struct _CdbCgnatGlobalProfile CdbCgnatGlobalProfile;
typedef struct _CdbCgnatGlobalIpPool CdbCgnatGlobalIpPool;
typedef struct _CdbCgnatSyslogServer CdbCgnatSyslogServer;
typedef struct _CdbCgnatSyslogServers CdbCgnatSyslogServers;
typedef struct _CdbCgnatGlobal CdbCgnatGlobal;
typedef struct _CdbTestArray CdbTestArray;
typedef struct _CdbTestBasic CdbTestBasic;
typedef struct _CdbCgnatTest CdbCgnatTest;
typedef struct _CdbCgnatTcpSessionTimeout CdbCgnatTcpSessionTimeout;
typedef struct _CdbCgnatProfileDataSsid CdbCgnatProfileDataSsid;
typedef struct _CdbCgnatProfileDataBasic CdbCgnatProfileDataBasic;
typedef struct _CdbCgnatProfileData CdbCgnatProfileData;
typedef struct _CdbCgnatIpV4Range CdbCgnatIpV4Range;
typedef struct _CdbCgnatIpV6Range CdbCgnatIpV6Range;
typedef struct _CdbCgnatIpPoolDataPool CdbCgnatIpPoolDataPool;
typedef struct _CdbCgnatIpPoolDataRunning CdbCgnatIpPoolDataRunning;
typedef struct _CdbCgnatIpPoolDataProfile CdbCgnatIpPoolDataProfile;
typedef struct _CdbCgnatIpPoolData CdbCgnatIpPoolData;
typedef struct _CdbWifiSubnet CdbWifiSubnet;
typedef struct _CdbWifiLogicIntf CdbWifiLogicIntf;
typedef struct _CdbDhcpmgrGlobalConfig CdbDhcpmgrGlobalConfig;
typedef struct _CdbWifiSvcpolicyRule CdbWifiSvcpolicyRule;
typedef struct _CdbWifiSvcpolicy CdbWifiSvcpolicy;
typedef struct _CdbWifisvcGlobalConfig CdbWifisvcGlobalConfig;
typedef struct _CdbWifiBindRecord CdbWifiBindRecord;
typedef struct _CdbWifidbgGlobalConfig CdbWifidbgGlobalConfig;


/* --- enums --- */

typedef enum _CdbVnfHaMonitorGroup__MethodType {
  CDB_VNF_HA_MONITOR_GROUP__METHOD_TYPE__UNKNOWN = 1,
  CDB_VNF_HA_MONITOR_GROUP__METHOD_TYPE__PING = 2,
  CDB_VNF_HA_MONITOR_GROUP__METHOD_TYPE__MAX = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_VNF_HA_MONITOR_GROUP__METHOD_TYPE)
} CdbVnfHaMonitorGroup__MethodType;
typedef enum _CdbWifiGlobalKeyIdMap__TableType {
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__SSID = 1,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__POLICY = 2,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__AUTHOR_PROF = 3,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__AUTHEN_PROF = 4,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__ACCT_PROF = 5,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__RADIUS_INTF = 6,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__LOGIC_INTF = 7,
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__VRF = 8,
  /*
   *"new types should be added before NUM_OF_TYPES"
   */
  CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE__NUM_OF_TYPES = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_WIFI_GLOBAL_KEY_ID_MAP__TABLE_TYPE)
} CdbWifiGlobalKeyIdMap__TableType;
typedef enum _CdbCgnatProfileDataBasic__CgnatProfileMappingMode {
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_MAPPING_MODE__N_TO_ONE = 0,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_MAPPING_MODE__ONE_TO_ONE = 1,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_MAPPING_MODE__PORT_PRESERVATION = 2,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_MAPPING_MODE__NFE_CGNAT_FROFILE_MAPPING_MODE_MAX = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_MAPPING_MODE)
} CdbCgnatProfileDataBasic__CgnatProfileMappingMode;
typedef enum _CdbCgnatProfileDataBasic__CgnatProfileAddrSelectMode {
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_ADDR_SELECT_MODE__CGNAT_ADDR_SEL_ROUND_ROBIN = 0,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_ADDR_SELECT_MODE__CGNAT_ADDR_SEL_LEAST_USED = 1,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_ADDR_SELECT_MODE__CGNAT_ADDR_SEL_LEAST_USERS = 2,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_ADDR_SELECT_MODE__CGNAT_ADDR_SEL_RANDOM = 3,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_ADDR_SELECT_MODE__CGNAT_ADDR_SEL_MAX = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_ADDR_SELECT_MODE)
} CdbCgnatProfileDataBasic__CgnatProfileAddrSelectMode;
typedef enum _CdbCgnatProfileDataBasic__CgnatProfileFilterSelectMode {
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_FILTER_SELECT_MODE__CGNAT_FILTER_SEL_EP_INDEPENDENT = 0,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_FILTER_SELECT_MODE__CGNAT_FILTER_SEL_ADDR_DEPENDENT = 1,
  CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_FILTER_SELECT_MODE__CGNAT_FILTER_SEL_MAX = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_CGNAT_PROFILE_DATA_BASIC__CGNAT_PROFILE_FILTER_SELECT_MODE)
} CdbCgnatProfileDataBasic__CgnatProfileFilterSelectMode;
/*
 * Add new bind type at bottom
 */
typedef enum _CdbWifiBindRecord__BindType {
  CDB_WIFI_BIND_RECORD__BIND_TYPE__LOGIC_INTF_TO_SSID = 1,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__POLICY_TO_SSID = 2,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__AUTHEN_TO_SSID = 3,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__AUTHOR_TO_SSID = 4,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__ACCT_TO_SSID = 5,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__CGNAT_TO_SSID = 6,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__RADIUS_INTF_TO_AUTHEN = 7,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__RADIUS_INTF_TO_AUTHOR = 8,
  CDB_WIFI_BIND_RECORD__BIND_TYPE__RADIUS_INTF_TO_ACCT = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_WIFI_BIND_RECORD__BIND_TYPE)
} CdbWifiBindRecord__BindType;
/*
 * wifi logging
 */
typedef enum _CdbWifidbgGlobalConfig__LogArea {
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__FSM = 0,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__RADIUS = 1,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__DHCP = 2,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__POLICY = 3,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__REDIRECT = 4,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__CGNAT = 5,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__WAGMGR = 6,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA__WAGMGRDB = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_WIFIDBG_GLOBAL_CONFIG__LOG_AREA)
} CdbWifidbgGlobalConfig__LogArea;
typedef enum _CdbWifidbgGlobalConfig__LogLvl {
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__EMERGENCY = 0,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__ALERT = 1,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__CRITICAL = 2,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__ERROR = 3,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__WARNING = 4,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__NOTIFICATION = 5,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__INFOMATIONAL = 6,
  CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL__DEBUGGING = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CDB_WIFIDBG_GLOBAL_CONFIG__LOG_LVL)
} CdbWifidbgGlobalConfig__LogLvl;

/* --- messages --- */

struct  _CdbVnfHaMonitorTarget
{
  ProtobufCMessage base;
  char *target_name;
  protobuf_c_boolean has_remote_ip;
  ProtobufCBinaryData remote_ip;
  char *vrf;
  protobuf_c_boolean has_vrf_id;
  uint32_t vrf_id;
};
#define CDB_VNF_HA_MONITOR_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_vnf_ha_monitor_target__descriptor) \
    , NULL, 0,{0,NULL}, NULL, 0,0 }


struct  _CdbVnfHaMonitorMember
{
  ProtobufCMessage base;
  char *member_name;
  /*
   * a list of targets that at least one needs to be up 
   */
  size_t n_target_name;
  char **target_name;
};
#define CDB_VNF_HA_MONITOR_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_vnf_ha_monitor_member__descriptor) \
    , NULL, 0,NULL }


struct  _CdbVnfHaMonitorGroup
{
  ProtobufCMessage base;
  char *group_name;
  protobuf_c_boolean has_method;
  CdbVnfHaMonitorGroup__MethodType method;
  protobuf_c_boolean has_ping_tx_interval;
  uint32_t ping_tx_interval;
  protobuf_c_boolean has_ping_rx_timeout;
  uint32_t ping_rx_timeout;
  /*
   *a list of configured target 
   */
  size_t n_monitor_target;
  CdbVnfHaMonitorTarget **monitor_target;
  /*
   *a list of members that all need to be up 
   */
  size_t n_member;
  CdbVnfHaMonitorMember **member;
};
#define CDB_VNF_HA_MONITOR_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_vnf_ha_monitor_group__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,NULL, 0,NULL }


struct  _CdbVnfHaMonitorMemberGroup
{
  ProtobufCMessage base;
  char *member_group_name;
  /*
   * a list of groups that at least one needs to be up 
   */
  size_t n_group_name;
  char **group_name;
};
#define CDB_VNF_HA_MONITOR_MEMBER_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_vnf_ha_monitor_member_group__descriptor) \
    , NULL, 0,NULL }


struct  _CdbVnfHa
{
  ProtobufCMessage base;
  protobuf_c_boolean has_preferred_role;
  int32_t preferred_role;
  char *self_interface;
  char *self_interface_ip_ver;
  /*
   *derived from self_interface, don't appear in CLI or "show run" 
   */
  protobuf_c_boolean has_local_ip;
  ProtobufCBinaryData local_ip;
  protobuf_c_boolean has_local_port;
  uint32_t local_port;
  protobuf_c_boolean has_remote_ip;
  ProtobufCBinaryData remote_ip;
  protobuf_c_boolean has_remote_port;
  uint32_t remote_port;
  protobuf_c_boolean has_local_mgmt_ip;
  ProtobufCBinaryData local_mgmt_ip;
  protobuf_c_boolean has_remote_mgmt_ip;
  ProtobufCBinaryData remote_mgmt_ip;
  protobuf_c_boolean has_remote_heartbeat_enable;
  int32_t remote_heartbeat_enable;
  protobuf_c_boolean has_active_node_selection;
  int32_t active_node_selection;
  protobuf_c_boolean has_remote_heartbeat_timeout;
  uint32_t remote_heartbeat_timeout;
  protobuf_c_boolean has_task_down_max;
  uint32_t task_down_max;
  protobuf_c_boolean has_local_poll_timeout;
  uint32_t local_poll_timeout;
  protobuf_c_boolean has_remote_mgmt_intf_reply_timeout;
  uint32_t remote_mgmt_intf_reply_timeout;
  protobuf_c_boolean has_redundancy_reboot;
  int32_t redundancy_reboot;
  int32_t logging_level;
  /*
   *a list of configured groups 
   */
  size_t n_monitor_group;
  CdbVnfHaMonitorGroup **monitor_group;
  /*
   *a list of member groups that all need to be up 
   */
  size_t n_monitor_member_group;
  CdbVnfHaMonitorMemberGroup **monitor_member_group;
  protobuf_c_boolean has_standalone_reboot;
  int32_t standalone_reboot;
};
#define CDB_VNF_HA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_vnf_ha__descriptor) \
    , 0,0, NULL, NULL, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0, 0,NULL, 0,NULL, 0,0 }


struct  _CdbWagRadiusIntfOrigIf
{
  ProtobufCMessage base;
  uint32_t if_type;
  uint32_t if_slot;
  uint32_t if_id;
  ProtobufCBinaryData if_addr_v4;
  ProtobufCBinaryData if_addr_v6;
  uint32_t if_vrf_id;
};
#define CDB_WAG_RADIUS_INTF_ORIG_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wag_radius_intf_orig_if__descriptor) \
    , 0, 0, 0, {0,NULL}, {0,NULL}, 0 }


struct  _CdbWagRadiusIntfPeer
{
  ProtobufCMessage base;
  uint32_t enable;
  uint32_t ip_addr_type;
  ProtobufCBinaryData ip_addr;
  char *key;
  protobuf_c_boolean has_intf_id;
  uint32_t intf_id;
  protobuf_c_boolean has_peer_index;
  uint32_t peer_index;
};
#define CDB_WAG_RADIUS_INTF_PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wag_radius_intf_peer__descriptor) \
    , 0, 0, {0,NULL}, NULL, 0,0, 0,0 }


struct  _CdbWagRadiusIntf
{
  ProtobufCMessage base;
  int32_t intf_id;
  char *intf_name;
  protobuf_c_boolean has_retry_intv;
  uint32_t retry_intv;
  protobuf_c_boolean has_retries;
  uint32_t retries;
  protobuf_c_boolean has_dead_time;
  uint32_t dead_time;
  CdbWagRadiusIntfOrigIf *orig_if;
  size_t n_peer;
  CdbWagRadiusIntfPeer **peer;
};
#define CDB_WAG_RADIUS_INTF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wag_radius_intf__descriptor) \
    , 0, NULL, 0,0, 0,0, 0,0, NULL, 0,NULL }


struct  _CdbWifissidEp
{
  ProtobufCMessage base;
  ProtobufCBinaryData ip_addr;
  uint32_t vlan_id;
  uint32_t vrf_id;
  protobuf_c_boolean has_if_addr_type;
  uint32_t if_addr_type;
  protobuf_c_boolean has_if_type;
  uint32_t if_type;
  protobuf_c_boolean has_if_slot;
  uint32_t if_slot;
  protobuf_c_boolean has_if_id;
  uint32_t if_id;
};
#define CDB_WIFISSID_EP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifissid_ep__descriptor) \
    , {0,NULL}, 0, 0, 0,0, 0,0, 0,0, 0,0 }


struct  _CdbWifissid
{
  ProtobufCMessage base;
  char *name;
  uint32_t index;
  protobuf_c_boolean has_admin;
  int32_t admin;
  protobuf_c_boolean has_session_timeout;
  uint32_t session_timeout;
  protobuf_c_boolean has_idle_timeout;
  uint32_t idle_timeout;
  char *pre_auth_policy;
  protobuf_c_boolean has_pre_auth_policy_id;
  uint32_t pre_auth_policy_id;
  char *post_auth_policy;
  protobuf_c_boolean has_post_auth_policy_id;
  uint32_t post_auth_policy_id;
  char *cgnat_profile;
  protobuf_c_boolean has_cgnat_profile_id;
  uint32_t cgnat_profile_id;
  char *radius_acct_profile;
  protobuf_c_boolean has_radius_acct_profile_id;
  uint32_t radius_acct_profile_id;
  char *radius_authen_profile;
  protobuf_c_boolean has_radius_authen_profile_id;
  uint32_t radius_authen_profile_id;
  char *radius_author_profile;
  protobuf_c_boolean has_radius_author_profile_id;
  uint32_t radius_author_profile_id;
  protobuf_c_boolean has_dhcp_intf_id;
  uint32_t dhcp_intf_id;
  char *dhcp_intf_name;
  size_t n_ssid_ep;
  CdbWifissidEp **ssid_ep;
  protobuf_c_boolean has_type;
  int32_t type;
  protobuf_c_boolean has_service_reject_msg;
  uint32_t service_reject_msg;
  protobuf_c_boolean has_upn_hair_pinning;
  uint32_t upn_hair_pinning;
  protobuf_c_boolean has_tcp_mss_adj;
  uint32_t tcp_mss_adj;
};
#define CDB_WIFISSID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifissid__descriptor) \
    , NULL, 0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _CdbWifiAuthorProfile
{
  ProtobufCMessage base;
  uint32_t profile_id;
  char *profile_name;
  protobuf_c_boolean has_radius_intf;
  uint32_t radius_intf;
};
#define CDB_WIFI_AUTHOR_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_author_profile__descriptor) \
    , 0, NULL, 0,0 }


struct  _CdbWifiAuthenProfile
{
  ProtobufCMessage base;
  uint32_t profile_id;
  char *profile_name;
  protobuf_c_boolean has_radius_intf;
  uint32_t radius_intf;
  char *dictionary;
};
#define CDB_WIFI_AUTHEN_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_authen_profile__descriptor) \
    , 0, NULL, 0,0, NULL }


struct  _CdbWifiAcctProfile
{
  ProtobufCMessage base;
  uint32_t profile_id;
  char *profile_name;
  protobuf_c_boolean has_radius_intf;
  uint32_t radius_intf;
  char *dictionary;
  protobuf_c_boolean has_interval;
  uint32_t interval;
};
#define CDB_WIFI_ACCT_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_acct_profile__descriptor) \
    , 0, NULL, 0,0, NULL, 0,0 }


struct  _CdbWifiKeyIdMap
{
  ProtobufCMessage base;
  char *name;
  uint32_t id;
};
#define CDB_WIFI_KEY_ID_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_key_id_map__descriptor) \
    , NULL, 0 }


struct  _CdbWifiGlobalKeyIdMap
{
  ProtobufCMessage base;
  /*
   * map_id is the key
   */
  CdbWifiGlobalKeyIdMap__TableType map_id;
  uint32_t last_id;
  uint32_t total_num;
  size_t n_map;
  CdbWifiKeyIdMap **map;
};
#define CDB_WIFI_GLOBAL_KEY_ID_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_global_key_id_map__descriptor) \
    , 0, 0, 0, 0,NULL }


/*
 *Key is index
 */
struct  _CdbWifiKeyIdMapSsidName
{
  ProtobufCMessage base;
  char *name;
};
#define CDB_WIFI_KEY_ID_MAP_SSID_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_key_id_map_ssid_name__descriptor) \
    , NULL }


/*
 *Key is name
 */
struct  _CdbWifiKeyIdMapSsidId
{
  ProtobufCMessage base;
  int32_t index;
};
#define CDB_WIFI_KEY_ID_MAP_SSID_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_key_id_map_ssid_id__descriptor) \
    , 0 }


struct  _CdbWifiKeyIdMapIntfName
{
  ProtobufCMessage base;
  char *name;
};
#define CDB_WIFI_KEY_ID_MAP_INTF_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_key_id_map_intf_name__descriptor) \
    , NULL }


struct  _CdbWifiKeyIdMapIntfId
{
  ProtobufCMessage base;
  int32_t index;
};
#define CDB_WIFI_KEY_ID_MAP_INTF_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_key_id_map_intf_id__descriptor) \
    , 0 }


/*
 *INIT_QAM_IP_QUOTA
 */
struct  _CdbCgnatInitQamIpQuota
{
  ProtobufCMessage base;
  size_t n_slot;
  uint32_t *slot;
};
#define CDB_CGNAT_INIT_QAM_IP_QUOTA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_init_qam_ip_quota__descriptor) \
    , 0,NULL }


struct  _CdbCgnatProfileKey
{
  ProtobufCMessage base;
  char *name;
  uint32_t id;
};
#define CDB_CGNAT_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_profile_key__descriptor) \
    , NULL, 0 }


struct  _CdbCgnatIpPoolKey
{
  ProtobufCMessage base;
  char *name;
  uint32_t id;
};
#define CDB_CGNAT_IP_POOL_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_pool_key__descriptor) \
    , NULL, 0 }


struct  _CdbCgnatGlobalConfig
{
  ProtobufCMessage base;
  CdbCgnatInitQamIpQuota *init_qam_ip_quota;
};
#define CDB_CGNAT_GLOBAL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_global_config__descriptor) \
    , NULL }


struct  _CdbCgnatTypeInt
{
  ProtobufCMessage base;
  int32_t value;
};
#define CDB_CGNAT_TYPE_INT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_type_int__descriptor) \
    , 0 }


struct  _CdbCgnatGlobalProfile
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_profile;
  uint32_t num_profile;
  /*
   *CGNAT_FROFILE_MAX_NUM
   */
  size_t n_p_profile_key;
  CdbCgnatProfileKey **p_profile_key;
  protobuf_c_boolean has_last_profile_id;
  uint32_t last_profile_id;
};
#define CDB_CGNAT_GLOBAL_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_global_profile__descriptor) \
    , 0,0, 0,NULL, 0,0 }


struct  _CdbCgnatGlobalIpPool
{
  ProtobufCMessage base;
  size_t n_ippool_key_p;
  CdbCgnatIpPoolKey **ippool_key_p;
  protobuf_c_boolean has_num_ippool;
  uint32_t num_ippool;
  protobuf_c_boolean has_last_ippool_id;
  uint32_t last_ippool_id;
};
#define CDB_CGNAT_GLOBAL_IP_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_global_ip_pool__descriptor) \
    , 0,NULL, 0,0, 0,0 }


struct  _CdbCgnatSyslogServer
{
  ProtobufCMessage base;
  uint32_t enable_flag;
  uint32_t vrf;
  uint32_t src_vrf;
  uint32_t port;
  uint32_t src_port;
  uint32_t v4_addr;
  uint32_t src_v4_addr;
};
#define CDB_CGNAT_SYSLOG_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_syslog_server__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _CdbCgnatSyslogServers
{
  ProtobufCMessage base;
  size_t n_syslog_server;
  CdbCgnatSyslogServer **syslog_server;
};
#define CDB_CGNAT_SYSLOG_SERVERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_syslog_servers__descriptor) \
    , 0,NULL }


struct  _CdbCgnatGlobal
{
  ProtobufCMessage base;
  CdbCgnatGlobalProfile *profile;
  CdbCgnatGlobalIpPool *ip_pool;
  /*
   *optional uint32                    active_slot_num = 7;   *not defined* 
   *repeated  CdbCgnatTypeInt          active_slot_map = 8;
   *optional CdbCgnatGlobalConfig    global_cfg = 9;
   */
  CdbCgnatSyslogServers *syslog_servers;
};
#define CDB_CGNAT_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_global__descriptor) \
    , NULL, NULL, NULL }


struct  _CdbTestArray
{
  ProtobufCMessage base;
  size_t n_p_array;
  CdbCgnatTypeInt **p_array;
};
#define CDB_TEST_ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_test_array__descriptor) \
    , 0,NULL }


struct  _CdbTestBasic
{
  ProtobufCMessage base;
  int32_t a;
  protobuf_c_boolean has_b;
  int32_t b;
};
#define CDB_TEST_BASIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_test_basic__descriptor) \
    , 0, 0,0 }


struct  _CdbCgnatTest
{
  ProtobufCMessage base;
  /*
   *repeated CdbCgnatTypeInt p_array = 1;
   */
  CdbTestArray *array;
  CdbTestBasic *basic_val;
};
#define CDB_CGNAT_TEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_test__descriptor) \
    , NULL, NULL }


struct  _CdbCgnatTcpSessionTimeout
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sync_timeout;
  uint32_t sync_timeout;
  protobuf_c_boolean has_ftp_order_timeout;
  uint32_t ftp_order_timeout;
  protobuf_c_boolean has_timeout_wait;
  uint32_t timeout_wait;
  protobuf_c_boolean has_refresh_enable;
  uint32_t refresh_enable;
};
#define CDB_CGNAT_TCP_SESSION_TIMEOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_tcp_session_timeout__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _CdbCgnatProfileDataSsid
{
  ProtobufCMessage base;
  /*
   *CGNAT_MAX_SSID_BIND_PER_PROFILE
   */
  size_t n_ssid_index;
  CdbCgnatTypeInt **ssid_index;
};
#define CDB_CGNAT_PROFILE_DATA_SSID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_profile_data_ssid__descriptor) \
    , 0,NULL }


struct  _CdbCgnatProfileDataBasic
{
  ProtobufCMessage base;
  /*
   * required CgnatCmdType cmd_type  = 1;
   */
  char *profile_name;
  protobuf_c_boolean has_enable_flag;
  uint32_t enable_flag;
  char *ip_pool_name;
  /*
   *required
   */
  uint32_t ip_pool_index;
  protobuf_c_boolean has_mapping_mode;
  CdbCgnatProfileDataBasic__CgnatProfileMappingMode mapping_mode;
  protobuf_c_boolean has_ext_addr_select_mode;
  CdbCgnatProfileDataBasic__CgnatProfileAddrSelectMode ext_addr_select_mode;
  protobuf_c_boolean has_additional_port_range;
  uint32_t additional_port_range;
  protobuf_c_boolean has_nat_filter_selection;
  CdbCgnatProfileDataBasic__CgnatProfileFilterSelectMode nat_filter_selection;
  protobuf_c_boolean has_tcp_ext_init_connection;
  uint32_t tcp_ext_init_connection;
  protobuf_c_boolean has_udp_timeout;
  uint32_t udp_timeout;
  protobuf_c_boolean has_tcp_timeout;
  uint32_t tcp_timeout;
  CdbCgnatTcpSessionTimeout *tcp_sess_fsm;
  protobuf_c_boolean has_pptp_enable;
  uint32_t pptp_enable;
};
#define CDB_CGNAT_PROFILE_DATA_BASIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_profile_data_basic__descriptor) \
    , NULL, 0,0, NULL, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


struct  _CdbCgnatProfileData
{
  ProtobufCMessage base;
  CdbCgnatProfileDataBasic *basic;
  /*
   *ssid bind info, not use.when delete a profile, walk ssid db .
   */
  CdbCgnatProfileDataSsid *ssid;
};
#define CDB_CGNAT_PROFILE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_profile_data__descriptor) \
    , NULL, NULL }


struct  _CdbCgnatIpV4Range
{
  ProtobufCMessage base;
  uint32_t start_v4_addr;
  uint32_t end_v4_addr;
  uint32_t prefix_len;
  /*
   *caculator network based on ip-addr-range
   */
  uint32_t network;
};
#define CDB_CGNAT_IP_V4_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_v4_range__descriptor) \
    , 0, 0, 0, 0 }


struct  _CdbCgnatIpV6Range
{
  ProtobufCMessage base;
};
#define CDB_CGNAT_IP_V6_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_v6_range__descriptor) \
     }


/*
 *CdbCgnatPublicIpPool
 */
struct  _CdbCgnatIpPoolDataPool
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable_flag;
  uint32_t enable_flag;
  protobuf_c_boolean has_port_range_size;
  uint32_t port_range_size;
  protobuf_c_boolean has_ip_range_size;
  uint32_t ip_range_size;
  protobuf_c_boolean has_port_range_number;
  uint32_t port_range_number;
  protobuf_c_boolean has_start_port;
  uint32_t start_port;
  protobuf_c_boolean has_end_port;
  uint32_t end_port;
  /*
   *CGNAT_NAME_MAX_LEN
   */
  char *ip_pool_name;
  /*
   *CGNAT_PUBLIC_IPV4_POOL_RANGE_MAX_NUM
   */
  size_t n_ipv4_range;
  CdbCgnatIpV4Range **ipv4_range;
  /*
   */
  size_t n_ipv6_range;
  CdbCgnatIpV6Range **ipv6_range;
  char *vrf_name;
  uint32_t vrf_id;
  /*
   *total ip address num that has been configured
   */
  protobuf_c_boolean has_total_addr_num;
  uint32_t total_addr_num;
  uint32_t oto_map_enable;
};
#define CDB_CGNAT_IP_POOL_DATA_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_pool_data_pool__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,NULL, 0,NULL, NULL, 0, 0,0, 0 }


/*
 *db_cgnat_ippool_slot_data_t
 *CdbCgnatIpPoolRunningData
 */
struct  _CdbCgnatIpPoolDataRunning
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable_flag;
  uint32_t enable_flag;
  protobuf_c_boolean has_active_flag;
  uint32_t active_flag;
  protobuf_c_boolean has_active_slot_num;
  uint32_t active_slot_num;
  protobuf_c_boolean has_active_add_num;
  uint32_t active_add_num;
  protobuf_c_boolean has_total_addr_num;
  uint32_t total_addr_num;
  protobuf_c_boolean has_current_ip_array_index;
  uint32_t current_ip_array_index;
  protobuf_c_boolean has_next_ip_index;
  uint32_t next_ip_index;
  protobuf_c_boolean has_next_ip_range_index;
  uint32_t next_ip_range_index;
  protobuf_c_boolean has_leftover_ip_num;
  uint32_t leftover_ip_num;
  /*
   * repeated db_cgnat_ippool_slot_data_t slot_data= 3;   //[CGNAT_SLOT_MAX_NUM];
   */
  protobuf_c_boolean has_vrf_id;
  uint32_t vrf_id;
};
#define CDB_CGNAT_IP_POOL_DATA_RUNNING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_pool_data_running__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CdbCgnatIpPoolDataProfile
{
  ProtobufCMessage base;
  /*
   *CGNAT_MAX_PROFILE_BIND_PER_IPPOOL
   */
  size_t n_profile_id;
  CdbCgnatTypeInt **profile_id;
};
#define CDB_CGNAT_IP_POOL_DATA_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_pool_data_profile__descriptor) \
    , 0,NULL }


struct  _CdbCgnatIpPoolData
{
  ProtobufCMessage base;
  /*
   *pool data
   */
  CdbCgnatIpPoolDataPool *data;
  /*
   *Currently, NOt use 
   */
  CdbCgnatIpPoolDataRunning *running_data;
  /*
   *profile-binding, no need to use it.when del, walk the profile db.
   */
  CdbCgnatIpPoolDataProfile *profile;
};
#define CDB_CGNAT_IP_POOL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_cgnat_ip_pool_data__descriptor) \
    , NULL, NULL, NULL }


struct  _CdbWifiSubnet
{
  ProtobufCMessage base;
  int32_t subnet_id;
  protobuf_c_boolean has_prefix_len;
  int32_t prefix_len;
  protobuf_c_boolean has_ip_addr;
  ProtobufCBinaryData ip_addr;
};
#define CDB_WIFI_SUBNET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_subnet__descriptor) \
    , 0, 0,0, 0,{0,NULL} }


struct  _CdbWifiLogicIntf
{
  ProtobufCMessage base;
  uint32_t intf_id;
  char *name;
  protobuf_c_boolean has_helper;
  ProtobufCBinaryData helper;
  char *vrf_name;
  protobuf_c_boolean has_vrf_id;
  int32_t vrf_id;
  protobuf_c_boolean has_v6_helper;
  ProtobufCBinaryData v6_helper;
  size_t n_subnet;
  CdbWifiSubnet **subnet;
};
#define CDB_WIFI_LOGIC_INTF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_logic_intf__descriptor) \
    , 0, NULL, 0,{0,NULL}, NULL, 0,0, 0,{0,NULL}, 0,NULL }


struct  _CdbDhcpmgrGlobalConfig
{
  ProtobufCMessage base;
  int32_t id;
  protobuf_c_boolean has_lease_time;
  int32_t lease_time;
  protobuf_c_boolean has_primary_dns;
  ProtobufCBinaryData primary_dns;
  protobuf_c_boolean has_secondary_dns;
  ProtobufCBinaryData secondary_dns;
  char *option;
  char *host_name;
  char *domain;
  protobuf_c_boolean has_log_level;
  uint32_t log_level;
};
#define CDB_DHCPMGR_GLOBAL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_dhcpmgr_global_config__descriptor) \
    , 0, 0,0, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL, 0,0 }


struct  _CdbWifiSvcpolicyRule
{
  ProtobufCMessage base;
  uint32_t rule_id;
  protobuf_c_boolean has_proto;
  uint32_t proto;
  protobuf_c_boolean has_direction;
  uint32_t direction;
  protobuf_c_boolean has_action;
  uint32_t action;
  protobuf_c_boolean has_mask_len;
  uint32_t mask_len;
  protobuf_c_boolean has_dst_port;
  uint32_t dst_port;
  protobuf_c_boolean has_dst_ipaddr;
  ProtobufCBinaryData dst_ipaddr;
  char *redirect_url;
  protobuf_c_boolean has_redirect_force;
  uint32_t redirect_force;
  protobuf_c_boolean has_dst_iptype;
  uint32_t dst_iptype;
};
#define CDB_WIFI_SVCPOLICY_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_svcpolicy_rule__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, NULL, 0,0, 0,0 }


struct  _CdbWifiSvcpolicy
{
  ProtobufCMessage base;
  char *policy_name;
  uint32_t policy_id;
  protobuf_c_boolean has_pre_auth_limit;
  uint32_t pre_auth_limit;
  protobuf_c_boolean has_auth_us_limit;
  uint32_t auth_us_limit;
  protobuf_c_boolean has_auth_ds_limit;
  uint32_t auth_ds_limit;
  size_t n_policy_rule;
  CdbWifiSvcpolicyRule **policy_rule;
};
#define CDB_WIFI_SVCPOLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_svcpolicy__descriptor) \
    , NULL, 0, 0,0, 0,0, 0,0, 0,NULL }


struct  _CdbWifisvcGlobalConfig
{
  ProtobufCMessage base;
  /*
   * wifi service
   */
  protobuf_c_boolean svc_enabled;
  protobuf_c_boolean cgnat_enabled;
  protobuf_c_boolean dhcp_enabled;
  protobuf_c_boolean radius_enabled;
  int32_t ssid_next_key_id;
  int32_t intf_next_key_id;
};
#define CDB_WIFISVC_GLOBAL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifisvc_global_config__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _CdbWifiBindRecord
{
  ProtobufCMessage base;
  int32_t counter;
};
#define CDB_WIFI_BIND_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifi_bind_record__descriptor) \
    , 0 }


struct  _CdbWifidbgGlobalConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_log_ap_mac_addr;
  ProtobufCBinaryData log_ap_mac_addr;
  protobuf_c_boolean has_log_ap_ip_addr;
  ProtobufCBinaryData log_ap_ip_addr;
  protobuf_c_boolean has_log_ue_mac_addr;
  ProtobufCBinaryData log_ue_mac_addr;
  protobuf_c_boolean has_log_ue_ip_addr;
  ProtobufCBinaryData log_ue_ip_addr;
  protobuf_c_boolean has_log_level;
  CdbWifidbgGlobalConfig__LogLvl log_level;
  size_t n_log_area;
  CdbWifidbgGlobalConfig__LogArea *log_area;
};
#define CDB_WIFIDBG_GLOBAL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb_wifidbg_global_config__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,NULL }


/* CdbVnfHaMonitorTarget methods */
void   cdb_vnf_ha_monitor_target__init
                     (CdbVnfHaMonitorTarget         *message);
size_t cdb_vnf_ha_monitor_target__get_packed_size
                     (const CdbVnfHaMonitorTarget   *message);
size_t cdb_vnf_ha_monitor_target__pack
                     (const CdbVnfHaMonitorTarget   *message,
                      uint8_t             *out);
size_t cdb_vnf_ha_monitor_target__pack_to_buffer
                     (const CdbVnfHaMonitorTarget   *message,
                      ProtobufCBuffer     *buffer);
CdbVnfHaMonitorTarget *
       cdb_vnf_ha_monitor_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_vnf_ha_monitor_target__free_unpacked
                     (CdbVnfHaMonitorTarget *message,
                      ProtobufCAllocator *allocator);
/* CdbVnfHaMonitorMember methods */
void   cdb_vnf_ha_monitor_member__init
                     (CdbVnfHaMonitorMember         *message);
size_t cdb_vnf_ha_monitor_member__get_packed_size
                     (const CdbVnfHaMonitorMember   *message);
size_t cdb_vnf_ha_monitor_member__pack
                     (const CdbVnfHaMonitorMember   *message,
                      uint8_t             *out);
size_t cdb_vnf_ha_monitor_member__pack_to_buffer
                     (const CdbVnfHaMonitorMember   *message,
                      ProtobufCBuffer     *buffer);
CdbVnfHaMonitorMember *
       cdb_vnf_ha_monitor_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_vnf_ha_monitor_member__free_unpacked
                     (CdbVnfHaMonitorMember *message,
                      ProtobufCAllocator *allocator);
/* CdbVnfHaMonitorGroup methods */
void   cdb_vnf_ha_monitor_group__init
                     (CdbVnfHaMonitorGroup         *message);
size_t cdb_vnf_ha_monitor_group__get_packed_size
                     (const CdbVnfHaMonitorGroup   *message);
size_t cdb_vnf_ha_monitor_group__pack
                     (const CdbVnfHaMonitorGroup   *message,
                      uint8_t             *out);
size_t cdb_vnf_ha_monitor_group__pack_to_buffer
                     (const CdbVnfHaMonitorGroup   *message,
                      ProtobufCBuffer     *buffer);
CdbVnfHaMonitorGroup *
       cdb_vnf_ha_monitor_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_vnf_ha_monitor_group__free_unpacked
                     (CdbVnfHaMonitorGroup *message,
                      ProtobufCAllocator *allocator);
/* CdbVnfHaMonitorMemberGroup methods */
void   cdb_vnf_ha_monitor_member_group__init
                     (CdbVnfHaMonitorMemberGroup         *message);
size_t cdb_vnf_ha_monitor_member_group__get_packed_size
                     (const CdbVnfHaMonitorMemberGroup   *message);
size_t cdb_vnf_ha_monitor_member_group__pack
                     (const CdbVnfHaMonitorMemberGroup   *message,
                      uint8_t             *out);
size_t cdb_vnf_ha_monitor_member_group__pack_to_buffer
                     (const CdbVnfHaMonitorMemberGroup   *message,
                      ProtobufCBuffer     *buffer);
CdbVnfHaMonitorMemberGroup *
       cdb_vnf_ha_monitor_member_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_vnf_ha_monitor_member_group__free_unpacked
                     (CdbVnfHaMonitorMemberGroup *message,
                      ProtobufCAllocator *allocator);
/* CdbVnfHa methods */
void   cdb_vnf_ha__init
                     (CdbVnfHa         *message);
size_t cdb_vnf_ha__get_packed_size
                     (const CdbVnfHa   *message);
size_t cdb_vnf_ha__pack
                     (const CdbVnfHa   *message,
                      uint8_t             *out);
size_t cdb_vnf_ha__pack_to_buffer
                     (const CdbVnfHa   *message,
                      ProtobufCBuffer     *buffer);
CdbVnfHa *
       cdb_vnf_ha__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_vnf_ha__free_unpacked
                     (CdbVnfHa *message,
                      ProtobufCAllocator *allocator);
/* CdbWagRadiusIntfOrigIf methods */
void   cdb_wag_radius_intf_orig_if__init
                     (CdbWagRadiusIntfOrigIf         *message);
size_t cdb_wag_radius_intf_orig_if__get_packed_size
                     (const CdbWagRadiusIntfOrigIf   *message);
size_t cdb_wag_radius_intf_orig_if__pack
                     (const CdbWagRadiusIntfOrigIf   *message,
                      uint8_t             *out);
size_t cdb_wag_radius_intf_orig_if__pack_to_buffer
                     (const CdbWagRadiusIntfOrigIf   *message,
                      ProtobufCBuffer     *buffer);
CdbWagRadiusIntfOrigIf *
       cdb_wag_radius_intf_orig_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wag_radius_intf_orig_if__free_unpacked
                     (CdbWagRadiusIntfOrigIf *message,
                      ProtobufCAllocator *allocator);
/* CdbWagRadiusIntfPeer methods */
void   cdb_wag_radius_intf_peer__init
                     (CdbWagRadiusIntfPeer         *message);
size_t cdb_wag_radius_intf_peer__get_packed_size
                     (const CdbWagRadiusIntfPeer   *message);
size_t cdb_wag_radius_intf_peer__pack
                     (const CdbWagRadiusIntfPeer   *message,
                      uint8_t             *out);
size_t cdb_wag_radius_intf_peer__pack_to_buffer
                     (const CdbWagRadiusIntfPeer   *message,
                      ProtobufCBuffer     *buffer);
CdbWagRadiusIntfPeer *
       cdb_wag_radius_intf_peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wag_radius_intf_peer__free_unpacked
                     (CdbWagRadiusIntfPeer *message,
                      ProtobufCAllocator *allocator);
/* CdbWagRadiusIntf methods */
void   cdb_wag_radius_intf__init
                     (CdbWagRadiusIntf         *message);
size_t cdb_wag_radius_intf__get_packed_size
                     (const CdbWagRadiusIntf   *message);
size_t cdb_wag_radius_intf__pack
                     (const CdbWagRadiusIntf   *message,
                      uint8_t             *out);
size_t cdb_wag_radius_intf__pack_to_buffer
                     (const CdbWagRadiusIntf   *message,
                      ProtobufCBuffer     *buffer);
CdbWagRadiusIntf *
       cdb_wag_radius_intf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wag_radius_intf__free_unpacked
                     (CdbWagRadiusIntf *message,
                      ProtobufCAllocator *allocator);
/* CdbWifissidEp methods */
void   cdb_wifissid_ep__init
                     (CdbWifissidEp         *message);
size_t cdb_wifissid_ep__get_packed_size
                     (const CdbWifissidEp   *message);
size_t cdb_wifissid_ep__pack
                     (const CdbWifissidEp   *message,
                      uint8_t             *out);
size_t cdb_wifissid_ep__pack_to_buffer
                     (const CdbWifissidEp   *message,
                      ProtobufCBuffer     *buffer);
CdbWifissidEp *
       cdb_wifissid_ep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifissid_ep__free_unpacked
                     (CdbWifissidEp *message,
                      ProtobufCAllocator *allocator);
/* CdbWifissid methods */
void   cdb_wifissid__init
                     (CdbWifissid         *message);
size_t cdb_wifissid__get_packed_size
                     (const CdbWifissid   *message);
size_t cdb_wifissid__pack
                     (const CdbWifissid   *message,
                      uint8_t             *out);
size_t cdb_wifissid__pack_to_buffer
                     (const CdbWifissid   *message,
                      ProtobufCBuffer     *buffer);
CdbWifissid *
       cdb_wifissid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifissid__free_unpacked
                     (CdbWifissid *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiAuthorProfile methods */
void   cdb_wifi_author_profile__init
                     (CdbWifiAuthorProfile         *message);
size_t cdb_wifi_author_profile__get_packed_size
                     (const CdbWifiAuthorProfile   *message);
size_t cdb_wifi_author_profile__pack
                     (const CdbWifiAuthorProfile   *message,
                      uint8_t             *out);
size_t cdb_wifi_author_profile__pack_to_buffer
                     (const CdbWifiAuthorProfile   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiAuthorProfile *
       cdb_wifi_author_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_author_profile__free_unpacked
                     (CdbWifiAuthorProfile *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiAuthenProfile methods */
void   cdb_wifi_authen_profile__init
                     (CdbWifiAuthenProfile         *message);
size_t cdb_wifi_authen_profile__get_packed_size
                     (const CdbWifiAuthenProfile   *message);
size_t cdb_wifi_authen_profile__pack
                     (const CdbWifiAuthenProfile   *message,
                      uint8_t             *out);
size_t cdb_wifi_authen_profile__pack_to_buffer
                     (const CdbWifiAuthenProfile   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiAuthenProfile *
       cdb_wifi_authen_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_authen_profile__free_unpacked
                     (CdbWifiAuthenProfile *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiAcctProfile methods */
void   cdb_wifi_acct_profile__init
                     (CdbWifiAcctProfile         *message);
size_t cdb_wifi_acct_profile__get_packed_size
                     (const CdbWifiAcctProfile   *message);
size_t cdb_wifi_acct_profile__pack
                     (const CdbWifiAcctProfile   *message,
                      uint8_t             *out);
size_t cdb_wifi_acct_profile__pack_to_buffer
                     (const CdbWifiAcctProfile   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiAcctProfile *
       cdb_wifi_acct_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_acct_profile__free_unpacked
                     (CdbWifiAcctProfile *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiKeyIdMap methods */
void   cdb_wifi_key_id_map__init
                     (CdbWifiKeyIdMap         *message);
size_t cdb_wifi_key_id_map__get_packed_size
                     (const CdbWifiKeyIdMap   *message);
size_t cdb_wifi_key_id_map__pack
                     (const CdbWifiKeyIdMap   *message,
                      uint8_t             *out);
size_t cdb_wifi_key_id_map__pack_to_buffer
                     (const CdbWifiKeyIdMap   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiKeyIdMap *
       cdb_wifi_key_id_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_key_id_map__free_unpacked
                     (CdbWifiKeyIdMap *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiGlobalKeyIdMap methods */
void   cdb_wifi_global_key_id_map__init
                     (CdbWifiGlobalKeyIdMap         *message);
size_t cdb_wifi_global_key_id_map__get_packed_size
                     (const CdbWifiGlobalKeyIdMap   *message);
size_t cdb_wifi_global_key_id_map__pack
                     (const CdbWifiGlobalKeyIdMap   *message,
                      uint8_t             *out);
size_t cdb_wifi_global_key_id_map__pack_to_buffer
                     (const CdbWifiGlobalKeyIdMap   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiGlobalKeyIdMap *
       cdb_wifi_global_key_id_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_global_key_id_map__free_unpacked
                     (CdbWifiGlobalKeyIdMap *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiKeyIdMapSsidName methods */
void   cdb_wifi_key_id_map_ssid_name__init
                     (CdbWifiKeyIdMapSsidName         *message);
size_t cdb_wifi_key_id_map_ssid_name__get_packed_size
                     (const CdbWifiKeyIdMapSsidName   *message);
size_t cdb_wifi_key_id_map_ssid_name__pack
                     (const CdbWifiKeyIdMapSsidName   *message,
                      uint8_t             *out);
size_t cdb_wifi_key_id_map_ssid_name__pack_to_buffer
                     (const CdbWifiKeyIdMapSsidName   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiKeyIdMapSsidName *
       cdb_wifi_key_id_map_ssid_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_key_id_map_ssid_name__free_unpacked
                     (CdbWifiKeyIdMapSsidName *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiKeyIdMapSsidId methods */
void   cdb_wifi_key_id_map_ssid_id__init
                     (CdbWifiKeyIdMapSsidId         *message);
size_t cdb_wifi_key_id_map_ssid_id__get_packed_size
                     (const CdbWifiKeyIdMapSsidId   *message);
size_t cdb_wifi_key_id_map_ssid_id__pack
                     (const CdbWifiKeyIdMapSsidId   *message,
                      uint8_t             *out);
size_t cdb_wifi_key_id_map_ssid_id__pack_to_buffer
                     (const CdbWifiKeyIdMapSsidId   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiKeyIdMapSsidId *
       cdb_wifi_key_id_map_ssid_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_key_id_map_ssid_id__free_unpacked
                     (CdbWifiKeyIdMapSsidId *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiKeyIdMapIntfName methods */
void   cdb_wifi_key_id_map_intf_name__init
                     (CdbWifiKeyIdMapIntfName         *message);
size_t cdb_wifi_key_id_map_intf_name__get_packed_size
                     (const CdbWifiKeyIdMapIntfName   *message);
size_t cdb_wifi_key_id_map_intf_name__pack
                     (const CdbWifiKeyIdMapIntfName   *message,
                      uint8_t             *out);
size_t cdb_wifi_key_id_map_intf_name__pack_to_buffer
                     (const CdbWifiKeyIdMapIntfName   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiKeyIdMapIntfName *
       cdb_wifi_key_id_map_intf_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_key_id_map_intf_name__free_unpacked
                     (CdbWifiKeyIdMapIntfName *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiKeyIdMapIntfId methods */
void   cdb_wifi_key_id_map_intf_id__init
                     (CdbWifiKeyIdMapIntfId         *message);
size_t cdb_wifi_key_id_map_intf_id__get_packed_size
                     (const CdbWifiKeyIdMapIntfId   *message);
size_t cdb_wifi_key_id_map_intf_id__pack
                     (const CdbWifiKeyIdMapIntfId   *message,
                      uint8_t             *out);
size_t cdb_wifi_key_id_map_intf_id__pack_to_buffer
                     (const CdbWifiKeyIdMapIntfId   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiKeyIdMapIntfId *
       cdb_wifi_key_id_map_intf_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_key_id_map_intf_id__free_unpacked
                     (CdbWifiKeyIdMapIntfId *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatInitQamIpQuota methods */
void   cdb_cgnat_init_qam_ip_quota__init
                     (CdbCgnatInitQamIpQuota         *message);
size_t cdb_cgnat_init_qam_ip_quota__get_packed_size
                     (const CdbCgnatInitQamIpQuota   *message);
size_t cdb_cgnat_init_qam_ip_quota__pack
                     (const CdbCgnatInitQamIpQuota   *message,
                      uint8_t             *out);
size_t cdb_cgnat_init_qam_ip_quota__pack_to_buffer
                     (const CdbCgnatInitQamIpQuota   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatInitQamIpQuota *
       cdb_cgnat_init_qam_ip_quota__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_init_qam_ip_quota__free_unpacked
                     (CdbCgnatInitQamIpQuota *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatProfileKey methods */
void   cdb_cgnat_profile_key__init
                     (CdbCgnatProfileKey         *message);
size_t cdb_cgnat_profile_key__get_packed_size
                     (const CdbCgnatProfileKey   *message);
size_t cdb_cgnat_profile_key__pack
                     (const CdbCgnatProfileKey   *message,
                      uint8_t             *out);
size_t cdb_cgnat_profile_key__pack_to_buffer
                     (const CdbCgnatProfileKey   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatProfileKey *
       cdb_cgnat_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_profile_key__free_unpacked
                     (CdbCgnatProfileKey *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpPoolKey methods */
void   cdb_cgnat_ip_pool_key__init
                     (CdbCgnatIpPoolKey         *message);
size_t cdb_cgnat_ip_pool_key__get_packed_size
                     (const CdbCgnatIpPoolKey   *message);
size_t cdb_cgnat_ip_pool_key__pack
                     (const CdbCgnatIpPoolKey   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_pool_key__pack_to_buffer
                     (const CdbCgnatIpPoolKey   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpPoolKey *
       cdb_cgnat_ip_pool_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_pool_key__free_unpacked
                     (CdbCgnatIpPoolKey *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatGlobalConfig methods */
void   cdb_cgnat_global_config__init
                     (CdbCgnatGlobalConfig         *message);
size_t cdb_cgnat_global_config__get_packed_size
                     (const CdbCgnatGlobalConfig   *message);
size_t cdb_cgnat_global_config__pack
                     (const CdbCgnatGlobalConfig   *message,
                      uint8_t             *out);
size_t cdb_cgnat_global_config__pack_to_buffer
                     (const CdbCgnatGlobalConfig   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatGlobalConfig *
       cdb_cgnat_global_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_global_config__free_unpacked
                     (CdbCgnatGlobalConfig *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatTypeInt methods */
void   cdb_cgnat_type_int__init
                     (CdbCgnatTypeInt         *message);
size_t cdb_cgnat_type_int__get_packed_size
                     (const CdbCgnatTypeInt   *message);
size_t cdb_cgnat_type_int__pack
                     (const CdbCgnatTypeInt   *message,
                      uint8_t             *out);
size_t cdb_cgnat_type_int__pack_to_buffer
                     (const CdbCgnatTypeInt   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatTypeInt *
       cdb_cgnat_type_int__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_type_int__free_unpacked
                     (CdbCgnatTypeInt *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatGlobalProfile methods */
void   cdb_cgnat_global_profile__init
                     (CdbCgnatGlobalProfile         *message);
size_t cdb_cgnat_global_profile__get_packed_size
                     (const CdbCgnatGlobalProfile   *message);
size_t cdb_cgnat_global_profile__pack
                     (const CdbCgnatGlobalProfile   *message,
                      uint8_t             *out);
size_t cdb_cgnat_global_profile__pack_to_buffer
                     (const CdbCgnatGlobalProfile   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatGlobalProfile *
       cdb_cgnat_global_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_global_profile__free_unpacked
                     (CdbCgnatGlobalProfile *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatGlobalIpPool methods */
void   cdb_cgnat_global_ip_pool__init
                     (CdbCgnatGlobalIpPool         *message);
size_t cdb_cgnat_global_ip_pool__get_packed_size
                     (const CdbCgnatGlobalIpPool   *message);
size_t cdb_cgnat_global_ip_pool__pack
                     (const CdbCgnatGlobalIpPool   *message,
                      uint8_t             *out);
size_t cdb_cgnat_global_ip_pool__pack_to_buffer
                     (const CdbCgnatGlobalIpPool   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatGlobalIpPool *
       cdb_cgnat_global_ip_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_global_ip_pool__free_unpacked
                     (CdbCgnatGlobalIpPool *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatSyslogServer methods */
void   cdb_cgnat_syslog_server__init
                     (CdbCgnatSyslogServer         *message);
size_t cdb_cgnat_syslog_server__get_packed_size
                     (const CdbCgnatSyslogServer   *message);
size_t cdb_cgnat_syslog_server__pack
                     (const CdbCgnatSyslogServer   *message,
                      uint8_t             *out);
size_t cdb_cgnat_syslog_server__pack_to_buffer
                     (const CdbCgnatSyslogServer   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatSyslogServer *
       cdb_cgnat_syslog_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_syslog_server__free_unpacked
                     (CdbCgnatSyslogServer *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatSyslogServers methods */
void   cdb_cgnat_syslog_servers__init
                     (CdbCgnatSyslogServers         *message);
size_t cdb_cgnat_syslog_servers__get_packed_size
                     (const CdbCgnatSyslogServers   *message);
size_t cdb_cgnat_syslog_servers__pack
                     (const CdbCgnatSyslogServers   *message,
                      uint8_t             *out);
size_t cdb_cgnat_syslog_servers__pack_to_buffer
                     (const CdbCgnatSyslogServers   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatSyslogServers *
       cdb_cgnat_syslog_servers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_syslog_servers__free_unpacked
                     (CdbCgnatSyslogServers *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatGlobal methods */
void   cdb_cgnat_global__init
                     (CdbCgnatGlobal         *message);
size_t cdb_cgnat_global__get_packed_size
                     (const CdbCgnatGlobal   *message);
size_t cdb_cgnat_global__pack
                     (const CdbCgnatGlobal   *message,
                      uint8_t             *out);
size_t cdb_cgnat_global__pack_to_buffer
                     (const CdbCgnatGlobal   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatGlobal *
       cdb_cgnat_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_global__free_unpacked
                     (CdbCgnatGlobal *message,
                      ProtobufCAllocator *allocator);
/* CdbTestArray methods */
void   cdb_test_array__init
                     (CdbTestArray         *message);
size_t cdb_test_array__get_packed_size
                     (const CdbTestArray   *message);
size_t cdb_test_array__pack
                     (const CdbTestArray   *message,
                      uint8_t             *out);
size_t cdb_test_array__pack_to_buffer
                     (const CdbTestArray   *message,
                      ProtobufCBuffer     *buffer);
CdbTestArray *
       cdb_test_array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_test_array__free_unpacked
                     (CdbTestArray *message,
                      ProtobufCAllocator *allocator);
/* CdbTestBasic methods */
void   cdb_test_basic__init
                     (CdbTestBasic         *message);
size_t cdb_test_basic__get_packed_size
                     (const CdbTestBasic   *message);
size_t cdb_test_basic__pack
                     (const CdbTestBasic   *message,
                      uint8_t             *out);
size_t cdb_test_basic__pack_to_buffer
                     (const CdbTestBasic   *message,
                      ProtobufCBuffer     *buffer);
CdbTestBasic *
       cdb_test_basic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_test_basic__free_unpacked
                     (CdbTestBasic *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatTest methods */
void   cdb_cgnat_test__init
                     (CdbCgnatTest         *message);
size_t cdb_cgnat_test__get_packed_size
                     (const CdbCgnatTest   *message);
size_t cdb_cgnat_test__pack
                     (const CdbCgnatTest   *message,
                      uint8_t             *out);
size_t cdb_cgnat_test__pack_to_buffer
                     (const CdbCgnatTest   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatTest *
       cdb_cgnat_test__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_test__free_unpacked
                     (CdbCgnatTest *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatTcpSessionTimeout methods */
void   cdb_cgnat_tcp_session_timeout__init
                     (CdbCgnatTcpSessionTimeout         *message);
size_t cdb_cgnat_tcp_session_timeout__get_packed_size
                     (const CdbCgnatTcpSessionTimeout   *message);
size_t cdb_cgnat_tcp_session_timeout__pack
                     (const CdbCgnatTcpSessionTimeout   *message,
                      uint8_t             *out);
size_t cdb_cgnat_tcp_session_timeout__pack_to_buffer
                     (const CdbCgnatTcpSessionTimeout   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatTcpSessionTimeout *
       cdb_cgnat_tcp_session_timeout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_tcp_session_timeout__free_unpacked
                     (CdbCgnatTcpSessionTimeout *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatProfileDataSsid methods */
void   cdb_cgnat_profile_data_ssid__init
                     (CdbCgnatProfileDataSsid         *message);
size_t cdb_cgnat_profile_data_ssid__get_packed_size
                     (const CdbCgnatProfileDataSsid   *message);
size_t cdb_cgnat_profile_data_ssid__pack
                     (const CdbCgnatProfileDataSsid   *message,
                      uint8_t             *out);
size_t cdb_cgnat_profile_data_ssid__pack_to_buffer
                     (const CdbCgnatProfileDataSsid   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatProfileDataSsid *
       cdb_cgnat_profile_data_ssid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_profile_data_ssid__free_unpacked
                     (CdbCgnatProfileDataSsid *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatProfileDataBasic methods */
void   cdb_cgnat_profile_data_basic__init
                     (CdbCgnatProfileDataBasic         *message);
size_t cdb_cgnat_profile_data_basic__get_packed_size
                     (const CdbCgnatProfileDataBasic   *message);
size_t cdb_cgnat_profile_data_basic__pack
                     (const CdbCgnatProfileDataBasic   *message,
                      uint8_t             *out);
size_t cdb_cgnat_profile_data_basic__pack_to_buffer
                     (const CdbCgnatProfileDataBasic   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatProfileDataBasic *
       cdb_cgnat_profile_data_basic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_profile_data_basic__free_unpacked
                     (CdbCgnatProfileDataBasic *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatProfileData methods */
void   cdb_cgnat_profile_data__init
                     (CdbCgnatProfileData         *message);
size_t cdb_cgnat_profile_data__get_packed_size
                     (const CdbCgnatProfileData   *message);
size_t cdb_cgnat_profile_data__pack
                     (const CdbCgnatProfileData   *message,
                      uint8_t             *out);
size_t cdb_cgnat_profile_data__pack_to_buffer
                     (const CdbCgnatProfileData   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatProfileData *
       cdb_cgnat_profile_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_profile_data__free_unpacked
                     (CdbCgnatProfileData *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpV4Range methods */
void   cdb_cgnat_ip_v4_range__init
                     (CdbCgnatIpV4Range         *message);
size_t cdb_cgnat_ip_v4_range__get_packed_size
                     (const CdbCgnatIpV4Range   *message);
size_t cdb_cgnat_ip_v4_range__pack
                     (const CdbCgnatIpV4Range   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_v4_range__pack_to_buffer
                     (const CdbCgnatIpV4Range   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpV4Range *
       cdb_cgnat_ip_v4_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_v4_range__free_unpacked
                     (CdbCgnatIpV4Range *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpV6Range methods */
void   cdb_cgnat_ip_v6_range__init
                     (CdbCgnatIpV6Range         *message);
size_t cdb_cgnat_ip_v6_range__get_packed_size
                     (const CdbCgnatIpV6Range   *message);
size_t cdb_cgnat_ip_v6_range__pack
                     (const CdbCgnatIpV6Range   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_v6_range__pack_to_buffer
                     (const CdbCgnatIpV6Range   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpV6Range *
       cdb_cgnat_ip_v6_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_v6_range__free_unpacked
                     (CdbCgnatIpV6Range *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpPoolDataPool methods */
void   cdb_cgnat_ip_pool_data_pool__init
                     (CdbCgnatIpPoolDataPool         *message);
size_t cdb_cgnat_ip_pool_data_pool__get_packed_size
                     (const CdbCgnatIpPoolDataPool   *message);
size_t cdb_cgnat_ip_pool_data_pool__pack
                     (const CdbCgnatIpPoolDataPool   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_pool_data_pool__pack_to_buffer
                     (const CdbCgnatIpPoolDataPool   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpPoolDataPool *
       cdb_cgnat_ip_pool_data_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_pool_data_pool__free_unpacked
                     (CdbCgnatIpPoolDataPool *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpPoolDataRunning methods */
void   cdb_cgnat_ip_pool_data_running__init
                     (CdbCgnatIpPoolDataRunning         *message);
size_t cdb_cgnat_ip_pool_data_running__get_packed_size
                     (const CdbCgnatIpPoolDataRunning   *message);
size_t cdb_cgnat_ip_pool_data_running__pack
                     (const CdbCgnatIpPoolDataRunning   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_pool_data_running__pack_to_buffer
                     (const CdbCgnatIpPoolDataRunning   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpPoolDataRunning *
       cdb_cgnat_ip_pool_data_running__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_pool_data_running__free_unpacked
                     (CdbCgnatIpPoolDataRunning *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpPoolDataProfile methods */
void   cdb_cgnat_ip_pool_data_profile__init
                     (CdbCgnatIpPoolDataProfile         *message);
size_t cdb_cgnat_ip_pool_data_profile__get_packed_size
                     (const CdbCgnatIpPoolDataProfile   *message);
size_t cdb_cgnat_ip_pool_data_profile__pack
                     (const CdbCgnatIpPoolDataProfile   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_pool_data_profile__pack_to_buffer
                     (const CdbCgnatIpPoolDataProfile   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpPoolDataProfile *
       cdb_cgnat_ip_pool_data_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_pool_data_profile__free_unpacked
                     (CdbCgnatIpPoolDataProfile *message,
                      ProtobufCAllocator *allocator);
/* CdbCgnatIpPoolData methods */
void   cdb_cgnat_ip_pool_data__init
                     (CdbCgnatIpPoolData         *message);
size_t cdb_cgnat_ip_pool_data__get_packed_size
                     (const CdbCgnatIpPoolData   *message);
size_t cdb_cgnat_ip_pool_data__pack
                     (const CdbCgnatIpPoolData   *message,
                      uint8_t             *out);
size_t cdb_cgnat_ip_pool_data__pack_to_buffer
                     (const CdbCgnatIpPoolData   *message,
                      ProtobufCBuffer     *buffer);
CdbCgnatIpPoolData *
       cdb_cgnat_ip_pool_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_cgnat_ip_pool_data__free_unpacked
                     (CdbCgnatIpPoolData *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiSubnet methods */
void   cdb_wifi_subnet__init
                     (CdbWifiSubnet         *message);
size_t cdb_wifi_subnet__get_packed_size
                     (const CdbWifiSubnet   *message);
size_t cdb_wifi_subnet__pack
                     (const CdbWifiSubnet   *message,
                      uint8_t             *out);
size_t cdb_wifi_subnet__pack_to_buffer
                     (const CdbWifiSubnet   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiSubnet *
       cdb_wifi_subnet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_subnet__free_unpacked
                     (CdbWifiSubnet *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiLogicIntf methods */
void   cdb_wifi_logic_intf__init
                     (CdbWifiLogicIntf         *message);
size_t cdb_wifi_logic_intf__get_packed_size
                     (const CdbWifiLogicIntf   *message);
size_t cdb_wifi_logic_intf__pack
                     (const CdbWifiLogicIntf   *message,
                      uint8_t             *out);
size_t cdb_wifi_logic_intf__pack_to_buffer
                     (const CdbWifiLogicIntf   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiLogicIntf *
       cdb_wifi_logic_intf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_logic_intf__free_unpacked
                     (CdbWifiLogicIntf *message,
                      ProtobufCAllocator *allocator);
/* CdbDhcpmgrGlobalConfig methods */
void   cdb_dhcpmgr_global_config__init
                     (CdbDhcpmgrGlobalConfig         *message);
size_t cdb_dhcpmgr_global_config__get_packed_size
                     (const CdbDhcpmgrGlobalConfig   *message);
size_t cdb_dhcpmgr_global_config__pack
                     (const CdbDhcpmgrGlobalConfig   *message,
                      uint8_t             *out);
size_t cdb_dhcpmgr_global_config__pack_to_buffer
                     (const CdbDhcpmgrGlobalConfig   *message,
                      ProtobufCBuffer     *buffer);
CdbDhcpmgrGlobalConfig *
       cdb_dhcpmgr_global_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_dhcpmgr_global_config__free_unpacked
                     (CdbDhcpmgrGlobalConfig *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiSvcpolicyRule methods */
void   cdb_wifi_svcpolicy_rule__init
                     (CdbWifiSvcpolicyRule         *message);
size_t cdb_wifi_svcpolicy_rule__get_packed_size
                     (const CdbWifiSvcpolicyRule   *message);
size_t cdb_wifi_svcpolicy_rule__pack
                     (const CdbWifiSvcpolicyRule   *message,
                      uint8_t             *out);
size_t cdb_wifi_svcpolicy_rule__pack_to_buffer
                     (const CdbWifiSvcpolicyRule   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiSvcpolicyRule *
       cdb_wifi_svcpolicy_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_svcpolicy_rule__free_unpacked
                     (CdbWifiSvcpolicyRule *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiSvcpolicy methods */
void   cdb_wifi_svcpolicy__init
                     (CdbWifiSvcpolicy         *message);
size_t cdb_wifi_svcpolicy__get_packed_size
                     (const CdbWifiSvcpolicy   *message);
size_t cdb_wifi_svcpolicy__pack
                     (const CdbWifiSvcpolicy   *message,
                      uint8_t             *out);
size_t cdb_wifi_svcpolicy__pack_to_buffer
                     (const CdbWifiSvcpolicy   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiSvcpolicy *
       cdb_wifi_svcpolicy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_svcpolicy__free_unpacked
                     (CdbWifiSvcpolicy *message,
                      ProtobufCAllocator *allocator);
/* CdbWifisvcGlobalConfig methods */
void   cdb_wifisvc_global_config__init
                     (CdbWifisvcGlobalConfig         *message);
size_t cdb_wifisvc_global_config__get_packed_size
                     (const CdbWifisvcGlobalConfig   *message);
size_t cdb_wifisvc_global_config__pack
                     (const CdbWifisvcGlobalConfig   *message,
                      uint8_t             *out);
size_t cdb_wifisvc_global_config__pack_to_buffer
                     (const CdbWifisvcGlobalConfig   *message,
                      ProtobufCBuffer     *buffer);
CdbWifisvcGlobalConfig *
       cdb_wifisvc_global_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifisvc_global_config__free_unpacked
                     (CdbWifisvcGlobalConfig *message,
                      ProtobufCAllocator *allocator);
/* CdbWifiBindRecord methods */
void   cdb_wifi_bind_record__init
                     (CdbWifiBindRecord         *message);
size_t cdb_wifi_bind_record__get_packed_size
                     (const CdbWifiBindRecord   *message);
size_t cdb_wifi_bind_record__pack
                     (const CdbWifiBindRecord   *message,
                      uint8_t             *out);
size_t cdb_wifi_bind_record__pack_to_buffer
                     (const CdbWifiBindRecord   *message,
                      ProtobufCBuffer     *buffer);
CdbWifiBindRecord *
       cdb_wifi_bind_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifi_bind_record__free_unpacked
                     (CdbWifiBindRecord *message,
                      ProtobufCAllocator *allocator);
/* CdbWifidbgGlobalConfig methods */
void   cdb_wifidbg_global_config__init
                     (CdbWifidbgGlobalConfig         *message);
size_t cdb_wifidbg_global_config__get_packed_size
                     (const CdbWifidbgGlobalConfig   *message);
size_t cdb_wifidbg_global_config__pack
                     (const CdbWifidbgGlobalConfig   *message,
                      uint8_t             *out);
size_t cdb_wifidbg_global_config__pack_to_buffer
                     (const CdbWifidbgGlobalConfig   *message,
                      ProtobufCBuffer     *buffer);
CdbWifidbgGlobalConfig *
       cdb_wifidbg_global_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb_wifidbg_global_config__free_unpacked
                     (CdbWifidbgGlobalConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CdbVnfHaMonitorTarget_Closure)
                 (const CdbVnfHaMonitorTarget *message,
                  void *closure_data);
typedef void (*CdbVnfHaMonitorMember_Closure)
                 (const CdbVnfHaMonitorMember *message,
                  void *closure_data);
typedef void (*CdbVnfHaMonitorGroup_Closure)
                 (const CdbVnfHaMonitorGroup *message,
                  void *closure_data);
typedef void (*CdbVnfHaMonitorMemberGroup_Closure)
                 (const CdbVnfHaMonitorMemberGroup *message,
                  void *closure_data);
typedef void (*CdbVnfHa_Closure)
                 (const CdbVnfHa *message,
                  void *closure_data);
typedef void (*CdbWagRadiusIntfOrigIf_Closure)
                 (const CdbWagRadiusIntfOrigIf *message,
                  void *closure_data);
typedef void (*CdbWagRadiusIntfPeer_Closure)
                 (const CdbWagRadiusIntfPeer *message,
                  void *closure_data);
typedef void (*CdbWagRadiusIntf_Closure)
                 (const CdbWagRadiusIntf *message,
                  void *closure_data);
typedef void (*CdbWifissidEp_Closure)
                 (const CdbWifissidEp *message,
                  void *closure_data);
typedef void (*CdbWifissid_Closure)
                 (const CdbWifissid *message,
                  void *closure_data);
typedef void (*CdbWifiAuthorProfile_Closure)
                 (const CdbWifiAuthorProfile *message,
                  void *closure_data);
typedef void (*CdbWifiAuthenProfile_Closure)
                 (const CdbWifiAuthenProfile *message,
                  void *closure_data);
typedef void (*CdbWifiAcctProfile_Closure)
                 (const CdbWifiAcctProfile *message,
                  void *closure_data);
typedef void (*CdbWifiKeyIdMap_Closure)
                 (const CdbWifiKeyIdMap *message,
                  void *closure_data);
typedef void (*CdbWifiGlobalKeyIdMap_Closure)
                 (const CdbWifiGlobalKeyIdMap *message,
                  void *closure_data);
typedef void (*CdbWifiKeyIdMapSsidName_Closure)
                 (const CdbWifiKeyIdMapSsidName *message,
                  void *closure_data);
typedef void (*CdbWifiKeyIdMapSsidId_Closure)
                 (const CdbWifiKeyIdMapSsidId *message,
                  void *closure_data);
typedef void (*CdbWifiKeyIdMapIntfName_Closure)
                 (const CdbWifiKeyIdMapIntfName *message,
                  void *closure_data);
typedef void (*CdbWifiKeyIdMapIntfId_Closure)
                 (const CdbWifiKeyIdMapIntfId *message,
                  void *closure_data);
typedef void (*CdbCgnatInitQamIpQuota_Closure)
                 (const CdbCgnatInitQamIpQuota *message,
                  void *closure_data);
typedef void (*CdbCgnatProfileKey_Closure)
                 (const CdbCgnatProfileKey *message,
                  void *closure_data);
typedef void (*CdbCgnatIpPoolKey_Closure)
                 (const CdbCgnatIpPoolKey *message,
                  void *closure_data);
typedef void (*CdbCgnatGlobalConfig_Closure)
                 (const CdbCgnatGlobalConfig *message,
                  void *closure_data);
typedef void (*CdbCgnatTypeInt_Closure)
                 (const CdbCgnatTypeInt *message,
                  void *closure_data);
typedef void (*CdbCgnatGlobalProfile_Closure)
                 (const CdbCgnatGlobalProfile *message,
                  void *closure_data);
typedef void (*CdbCgnatGlobalIpPool_Closure)
                 (const CdbCgnatGlobalIpPool *message,
                  void *closure_data);
typedef void (*CdbCgnatSyslogServer_Closure)
                 (const CdbCgnatSyslogServer *message,
                  void *closure_data);
typedef void (*CdbCgnatSyslogServers_Closure)
                 (const CdbCgnatSyslogServers *message,
                  void *closure_data);
typedef void (*CdbCgnatGlobal_Closure)
                 (const CdbCgnatGlobal *message,
                  void *closure_data);
typedef void (*CdbTestArray_Closure)
                 (const CdbTestArray *message,
                  void *closure_data);
typedef void (*CdbTestBasic_Closure)
                 (const CdbTestBasic *message,
                  void *closure_data);
typedef void (*CdbCgnatTest_Closure)
                 (const CdbCgnatTest *message,
                  void *closure_data);
typedef void (*CdbCgnatTcpSessionTimeout_Closure)
                 (const CdbCgnatTcpSessionTimeout *message,
                  void *closure_data);
typedef void (*CdbCgnatProfileDataSsid_Closure)
                 (const CdbCgnatProfileDataSsid *message,
                  void *closure_data);
typedef void (*CdbCgnatProfileDataBasic_Closure)
                 (const CdbCgnatProfileDataBasic *message,
                  void *closure_data);
typedef void (*CdbCgnatProfileData_Closure)
                 (const CdbCgnatProfileData *message,
                  void *closure_data);
typedef void (*CdbCgnatIpV4Range_Closure)
                 (const CdbCgnatIpV4Range *message,
                  void *closure_data);
typedef void (*CdbCgnatIpV6Range_Closure)
                 (const CdbCgnatIpV6Range *message,
                  void *closure_data);
typedef void (*CdbCgnatIpPoolDataPool_Closure)
                 (const CdbCgnatIpPoolDataPool *message,
                  void *closure_data);
typedef void (*CdbCgnatIpPoolDataRunning_Closure)
                 (const CdbCgnatIpPoolDataRunning *message,
                  void *closure_data);
typedef void (*CdbCgnatIpPoolDataProfile_Closure)
                 (const CdbCgnatIpPoolDataProfile *message,
                  void *closure_data);
typedef void (*CdbCgnatIpPoolData_Closure)
                 (const CdbCgnatIpPoolData *message,
                  void *closure_data);
typedef void (*CdbWifiSubnet_Closure)
                 (const CdbWifiSubnet *message,
                  void *closure_data);
typedef void (*CdbWifiLogicIntf_Closure)
                 (const CdbWifiLogicIntf *message,
                  void *closure_data);
typedef void (*CdbDhcpmgrGlobalConfig_Closure)
                 (const CdbDhcpmgrGlobalConfig *message,
                  void *closure_data);
typedef void (*CdbWifiSvcpolicyRule_Closure)
                 (const CdbWifiSvcpolicyRule *message,
                  void *closure_data);
typedef void (*CdbWifiSvcpolicy_Closure)
                 (const CdbWifiSvcpolicy *message,
                  void *closure_data);
typedef void (*CdbWifisvcGlobalConfig_Closure)
                 (const CdbWifisvcGlobalConfig *message,
                  void *closure_data);
typedef void (*CdbWifiBindRecord_Closure)
                 (const CdbWifiBindRecord *message,
                  void *closure_data);
typedef void (*CdbWifidbgGlobalConfig_Closure)
                 (const CdbWifidbgGlobalConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cdb_vnf_ha_monitor_target__descriptor;
extern const ProtobufCMessageDescriptor cdb_vnf_ha_monitor_member__descriptor;
extern const ProtobufCMessageDescriptor cdb_vnf_ha_monitor_group__descriptor;
extern const ProtobufCEnumDescriptor    cdb_vnf_ha_monitor_group__method_type__descriptor;
extern const ProtobufCMessageDescriptor cdb_vnf_ha_monitor_member_group__descriptor;
extern const ProtobufCMessageDescriptor cdb_vnf_ha__descriptor;
extern const ProtobufCMessageDescriptor cdb_wag_radius_intf_orig_if__descriptor;
extern const ProtobufCMessageDescriptor cdb_wag_radius_intf_peer__descriptor;
extern const ProtobufCMessageDescriptor cdb_wag_radius_intf__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifissid_ep__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifissid__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_author_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_authen_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_acct_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_key_id_map__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_global_key_id_map__descriptor;
extern const ProtobufCEnumDescriptor    cdb_wifi_global_key_id_map__table_type__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_key_id_map_ssid_name__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_key_id_map_ssid_id__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_key_id_map_intf_name__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_key_id_map_intf_id__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_init_qam_ip_quota__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_pool_key__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_global_config__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_type_int__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_global_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_global_ip_pool__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_syslog_server__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_syslog_servers__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_global__descriptor;
extern const ProtobufCMessageDescriptor cdb_test_array__descriptor;
extern const ProtobufCMessageDescriptor cdb_test_basic__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_test__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_tcp_session_timeout__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_profile_data_ssid__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_profile_data_basic__descriptor;
extern const ProtobufCEnumDescriptor    cdb_cgnat_profile_data_basic__cgnat_profile_mapping_mode__descriptor;
extern const ProtobufCEnumDescriptor    cdb_cgnat_profile_data_basic__cgnat_profile_addr_select_mode__descriptor;
extern const ProtobufCEnumDescriptor    cdb_cgnat_profile_data_basic__cgnat_profile_filter_select_mode__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_profile_data__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_v4_range__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_v6_range__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_pool_data_pool__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_pool_data_running__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_pool_data_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb_cgnat_ip_pool_data__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_subnet__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_logic_intf__descriptor;
extern const ProtobufCMessageDescriptor cdb_dhcpmgr_global_config__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_svcpolicy_rule__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_svcpolicy__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifisvc_global_config__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifi_bind_record__descriptor;
extern const ProtobufCEnumDescriptor    cdb_wifi_bind_record__bind_type__descriptor;
extern const ProtobufCMessageDescriptor cdb_wifidbg_global_config__descriptor;
extern const ProtobufCEnumDescriptor    cdb_wifidbg_global_config__log_area__descriptor;
extern const ProtobufCEnumDescriptor    cdb_wifidbg_global_config__log_lvl__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_record_5fcdb_2eproto__INCLUDED */
