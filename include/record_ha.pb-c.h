/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: record_ha.proto */

#ifndef PROTOBUF_C_record_5fha_2eproto__INCLUDED
#define PROTOBUF_C_record_5fha_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _HaIpsecStartTime HaIpsecStartTime;
typedef struct _HaIkePeer HaIkePeer;
typedef struct _HaIkeInfo HaIkeInfo;
typedef struct _HaIkeEpdgCtx HaIkeEpdgCtx;
typedef struct _HaIkeStat HaIkeStat;
typedef struct _HaChildInfo HaChildInfo;
typedef struct _HaChildKeyEx HaChildKeyEx;
typedef struct _HaChildStat HaChildStat;
typedef struct _HaSwmDiam HaSwmDiam;
typedef struct _HaIppool HaIppool;
typedef struct _HaEpdgSessionCommon HaEpdgSessionCommon;
typedef struct _HaEpdgSessionUe HaEpdgSessionUe;
typedef struct _HaEpdgSessionApnAmbr HaEpdgSessionApnAmbr;
typedef struct _HaEpdgBearerCommon HaEpdgBearerCommon;
typedef struct _HaEpdgBearerQos HaEpdgBearerQos;
typedef struct _HaS1mmeInstCfg HaS1mmeInstCfg;
typedef struct _HaS1mmeLenb HaS1mmeLenb;
typedef struct _HaS1mmeMmeCb HaS1mmeMmeCb;
typedef struct _HaS1mmeMmePlmn HaS1mmeMmePlmn;
typedef struct _HaS1mmeMmeMmecs HaS1mmeMmeMmecs;
typedef struct _HaS1mmeMmeGroupid HaS1mmeMmeGroupid;
typedef struct _HaS1mmeSuptdTai HaS1mmeSuptdTai;
typedef struct _HaS1mmeHenbCb HaS1mmeHenbCb;
typedef struct _HaS1mmeX2Henb HaS1mmeX2Henb;
typedef struct _HaS1mmeX2Enb HaS1mmeX2Enb;
typedef struct _HaS1mmeX2ServedCell HaS1mmeX2ServedCell;
typedef struct _HaS1mmeSctpRedGlbData HaS1mmeSctpRedGlbData;
typedef struct _HaS1mmeSctpRedGlbEp HaS1mmeSctpRedGlbEp;
typedef struct _HaS1mmeSctpRedGlbPmtu HaS1mmeSctpRedGlbPmtu;
typedef struct _HaS1mmeSctpRedEpData HaS1mmeSctpRedEpData;
typedef struct _HaS1mmeSctpRedEpAssocobj HaS1mmeSctpRedEpAssocobj;
typedef struct _HaHenbmInstCfg HaHenbmInstCfg;
typedef struct _HaHenbDataCb HaHenbDataCb;
typedef struct _HaHenbDataCsg HaHenbDataCsg;
typedef struct _HaHenbDataTai HaHenbDataTai;
typedef struct _HaUeDataCb HaUeDataCb;
typedef struct _HaTeDataCb HaTeDataCb;
typedef struct _HaGtpuStat HaGtpuStat;
typedef struct _HaX2HenbDataCb HaX2HenbDataCb;
typedef struct _HaHenbSctpRedGlbData HaHenbSctpRedGlbData;
typedef struct _HaHenbSctpRedGlbEp HaHenbSctpRedGlbEp;
typedef struct _HaHenbSctpRedGlbPmtu HaHenbSctpRedGlbPmtu;
typedef struct _HaHenbSctpRedEpData HaHenbSctpRedEpData;
typedef struct _HaHenbSctpRedEpAssocobj HaHenbSctpRedEpAssocobj;
typedef struct _HaChRowMsg HaChRowMsg;


/* --- enums --- */

typedef enum _HaChRowMsg__EVENT {
  HA_CH_ROW_MSG__EVENT__DELETE = 0,
  HA_CH_ROW_MSG__EVENT__COMPLETE_UPDATE = 1,
  HA_CH_ROW_MSG__EVENT__PARTIAL_UPDATE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HA_CH_ROW_MSG__EVENT)
} HaChRowMsg__EVENT;

/* --- messages --- */

struct  _HaIpsecStartTime
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time;
  ProtobufCBinaryData time;
  protobuf_c_boolean has_cycles;
  uint64_t cycles;
};
#define HA_IPSEC_START_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ipsec_start_time__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _HaIkePeer
{
  ProtobufCMessage base;
  uint32_t dwid;
  /*
   * MOC_IP_ADDRESS_S 
   */
  protobuf_c_boolean has_dwpeeraddr;
  ProtobufCBinaryData dwpeeraddr;
  protobuf_c_boolean has_wpeerport;
  uint32_t wpeerport;
  protobuf_c_boolean has_dwpeerinternaladdr;
  ProtobufCBinaryData dwpeerinternaladdr;
  protobuf_c_boolean has_dwpeerinternalprefixlen;
  uint32_t dwpeerinternalprefixlen;
};
#define HA_IKE_PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ike_peer__descriptor) \
    , 0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,0 }


struct  _HaIkeInfo
{
  ProtobufCMessage base;
  /*
   * system uptime (in ms) at initial exchange 
   */
  protobuf_c_boolean has_dwtimestart;
  uint32_t dwtimestart;
  /*
   * system uptime (in ms) at IKE_SA establishment 
   */
  protobuf_c_boolean has_dwtimecreated;
  uint32_t dwtimecreated;
  /*
   * internal ID; intact when deleted 
   */
  uint32_t dwid;
  /*
   * locator 
   */
  protobuf_c_boolean has_wloc;
  int32_t wloc;
  protobuf_c_boolean has_serviceinstance;
  int32_t serviceinstance;
  /*
   * poCky_I[IKE_COOKIE_SIZE];  initiator cookie poCky_I[IKE_COOKIE_SIZE] 
   */
  protobuf_c_boolean has_pocky_i;
  ProtobufCBinaryData pocky_i;
  /*
   * poCky_R[IKE_COOKIE_SIZE];  responder cookie 
   */
  protobuf_c_boolean has_pocky_r;
  ProtobufCBinaryData pocky_r;
  protobuf_c_boolean has_dwhostaddr;
  ProtobufCBinaryData dwhostaddr;
  protobuf_c_boolean has_whostport;
  uint32_t whostport;
  protobuf_c_boolean has_ovrfid;
  uint32_t ovrfid;
  protobuf_c_boolean has_dwdpdsecs;
  uint32_t dwdpdsecs;
  /*
   * lifetime 
   */
  protobuf_c_boolean has_dwexpsecs;
  uint32_t dwexpsecs;
  protobuf_c_boolean has_dwexpkbytes;
  uint32_t dwexpkbytes;
  /*
   * crypto suites 
   */
  /*
   * [v2] 
   */
  protobuf_c_boolean has_wdhgrp;
  uint32_t wdhgrp;
  /*
   *struct IKE_hashSuiteInfo    xHashSuite;
   */
  /*
   * [v2] PRF_ transform ID 
   */
  protobuf_c_boolean has_whashtfmid;
  uint32_t whashtfmid;
  /*
   *struct IKE_macSuiteInfo     xMacSuite;
   */
  /*
   * AUTH_ transform ID 
   */
  protobuf_c_boolean has_wauthtfmid;
  uint32_t wauthtfmid;
  /*
   * [v2] 
   */
  protobuf_c_boolean has_wauthkeylen;
  uint32_t wauthkeylen;
  protobuf_c_boolean has_wencrtfmid;
  uint32_t wencrtfmid;
  protobuf_c_boolean has_wencrkeylen;
  uint32_t wencrkeylen;
  /*
   * [v1] 
   */
  protobuf_c_boolean has_otfmno;
  uint32_t otfmno;
  /*
   * [v2] 
   */
  protobuf_c_boolean has_oppsno;
  uint32_t oppsno;
  /*
   * system uptime (in ms) at IKE_AUTH establishment 
   */
  protobuf_c_boolean has_dwtimeauthed;
  uint32_t dwtimeauthed;
  /*
   * rfc4478 Repeated Auth. 
   */
  protobuf_c_boolean has_dwexpauthsecs;
  uint32_t dwexpauthsecs;
  /*
   * SK_d | SK_ai | SK_ar | SK_ei | SK_er | SK_pi | SK_pr 
   */
  /*
   * SK[IKE_HASH_MAX*3 + IKE_AUTHKEY_MAX*2 + IKE_ENCRKEY_MAX*2]; keying material 
   */
  protobuf_c_boolean has_sk;
  ProtobufCBinaryData sk;
  protobuf_c_boolean has_dwsuccrid;
  uint32_t dwsuccrid;
  /*
   * predecessor
   */
  protobuf_c_boolean has_dwprdcrid;
  uint32_t dwprdcrid;
  /*
   * cipsec_ha_epdg_ctx_t  edpg_ctx; 
   */
  HaIkeEpdgCtx *epdg_ctx;
};
#define HA_IKE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ike_info__descriptor) \
    , 0,0, 0,0, 0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, NULL }


struct  _HaIkeEpdgCtx
{
  ProtobufCMessage base;
  protobuf_c_boolean has_epdgteid;
  uint32_t epdgteid;
};
#define HA_IKE_EPDG_CTX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ike_epdg_ctx__descriptor) \
    , 0,0 }


struct  _HaIkeStat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_flags2;
  uint32_t flags2;
  protobuf_c_boolean has_natt_flags;
  uint32_t natt_flags;
  /*
   * [v1] phase 1 exchange state (see "ike_state.h") 
   */
  protobuf_c_boolean has_ostate;
  uint32_t ostate;
  /*
   * system uptime (in ms) at most recent outbound (phase 1),
   *inbound (phase 2), or inbound CHILD [v2] exchange 
   */
  protobuf_c_boolean has_dwtimestamp;
  uint32_t dwtimestamp;
  protobuf_c_boolean has_dwtimestampnattkeepalive;
  uint32_t dwtimestampnattkeepalive;
  protobuf_c_boolean has_dwcurpktsib;
  uint32_t dwcurpktsib;
  protobuf_c_boolean has_dwcurkbytesib;
  uint32_t dwcurkbytesib;
  /*
   * count of bytes < 1k in addition to dwCurKBytes 
   */
  protobuf_c_boolean has_dwcurbytesib;
  uint32_t dwcurbytesib;
  protobuf_c_boolean has_dwcurpktsob;
  uint32_t dwcurpktsob;
  protobuf_c_boolean has_dwcurkbytesob;
  uint32_t dwcurkbytesob;
  /*
   * count of bytes < 1k in addition to dwCurKBytes 
   */
  protobuf_c_boolean has_dwcurbytesob;
  uint32_t dwcurbytesob;
  protobuf_c_boolean has_dwmsgid_i;
  uint32_t dwmsgid_i;
  protobuf_c_boolean has_dwmsgid_r;
  uint32_t dwmsgid_r;
  protobuf_c_boolean has_dwwndlen_i;
  uint32_t dwwndlen_i;
  protobuf_c_boolean has_dwwndlen_r;
  uint32_t dwwndlen_r;
  protobuf_c_boolean has_dwwndidx_i;
  uint32_t dwwndidx_i;
  protobuf_c_boolean has_dwwndidx_r;
  uint32_t dwwndidx_r;
  /*
   * status code 
   */
  protobuf_c_boolean has_merror;
  uint32_t merror;
  /*
   * [v2] Notify error code (initiator only)
   *valid if (status code == ERR_IKE_NOTIFY_PAYLOAD) 
   */
  protobuf_c_boolean has_wmsgtype;
  uint32_t wmsgtype;
  /*
   * cumulative stats across rekeys
   */
  /*
   * system uptime (in ms) at SA establishment 
   */
  protobuf_c_boolean has_cum_created;
  int32_t cum_created;
  /*
   * number of rekeys
   */
  protobuf_c_boolean has_cum_rekeys;
  uint32_t cum_rekeys;
  protobuf_c_boolean has_cum_pkts_ib;
  uint64_t cum_pkts_ib;
  protobuf_c_boolean has_cum_kbytes_ib;
  uint64_t cum_kbytes_ib;
  /*
   * count of bytes < 1k in addition to dwCurKBytes 
   */
  protobuf_c_boolean has_cum_bytes_ib;
  uint64_t cum_bytes_ib;
  protobuf_c_boolean has_cum_pkts_ob;
  uint64_t cum_pkts_ob;
  protobuf_c_boolean has_cum_kbytes_ob;
  uint64_t cum_kbytes_ob;
  /*
   * count of bytes < 1k in addition to dwCurKBytes 
   */
  protobuf_c_boolean has_cum_bytes_ob;
  uint64_t cum_bytes_ob;
  protobuf_c_boolean has_dwmsgidinc;
  uint32_t dwmsgidinc;
};
#define HA_IKE_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ike_stat__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _HaChildInfo
{
  ProtobufCMessage base;
  HaChildKeyEx *key;
  /*
   * authKey[128];    Key storage 
   */
  protobuf_c_boolean has_authkey;
  ProtobufCBinaryData authkey;
  /*
   *  encrKey[128]; 
   */
  protobuf_c_boolean has_encrkey;
  ProtobufCBinaryData encrkey;
};
#define HA_CHILD_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_child_info__descriptor) \
    , NULL, 0,{0,NULL}, 0,{0,NULL} }


struct  _HaChildKeyEx
{
  ProtobufCMessage base;
  /*
   * direction, initiator, replay, etc. 
   */
  protobuf_c_boolean has_flags;
  uint32_t flags;
  /*
   * IPPROTO_AH or IPPROTO_ESP 
   */
  protobuf_c_boolean has_oprotocol;
  uint32_t oprotocol;
  /*
   * VRF used for packet I/O (to outside) 
   */
  protobuf_c_boolean has_vrfid;
  uint32_t vrfid;
  /*
   * VRF used for packet I/O (to inside) 
   */
  protobuf_c_boolean has_vrfidinside;
  uint32_t vrfidinside;
  /*
   * SPI to use 
   */
  protobuf_c_boolean has_dwspi;
  uint32_t dwspi;
  /*
   * Internal ID, for local SA, the same as dwSpi
   */
  uint32_t dwid;
  /*
   * MOC_IP_ADDRESS_S dwDestAddr; destination IP address 
   */
  protobuf_c_boolean has_dwdestaddr;
  ProtobufCBinaryData dwdestaddr;
  /*
   * MOC_IP_ADDRESS_S dwSrcAddr;  source IP address 
   */
  protobuf_c_boolean has_dwsrcaddr;
  ProtobufCBinaryData dwsrcaddr;
  /*
   * developer customizable cookie (e.g. VLan id) or PF_KEY reqid 
   */
  protobuf_c_boolean has_cookie;
  uint32_t cookie;
  protobuf_c_boolean has_oudpencenum;
  uint32_t oudpencenum;
  /*
   * peer's UDP-encapsulation port number; 0=no UDP-encap. 
   */
  protobuf_c_boolean has_wudpencport;
  uint32_t wudpencport;
  /*
   * wDestPort[CIPSEC_MAX_TS] wDestPortEnd[CIPSEC_MAX_TS]; destination port range; 0=any or N/A 
   */
  size_t n_wdestport;
  uint32_t *wdestport;
  size_t n_wdestportend;
  uint32_t *wdestportend;
  /*
   * wSrcPort[CIPSEC_MAX_TS], wSrcPortEnd[CIPSEC_MAX_TS];  source port range; 0=any or N/A 
   */
  size_t n_wsrcport;
  uint32_t *wsrcport;
  size_t n_wsrcportend;
  uint32_t *wsrcportend;
  /*
   * oUlp[2][CIPSEC_MAX_TS];  upper layer protocol; 0=any o/w, see "ipsec_protos_casa.h" 
   */
  size_t n_oulp;
  uint32_t *oulp;
  /*
   * tsNum[2]; number of traffic selectors in both directions 
   */
  protobuf_c_boolean has_tsnum;
  uint32_t tsnum;
  /*
   * IPSEC_MODE_TRANSPORT or IPSEC_MODE_TUNNEL 
   */
  protobuf_c_boolean has_omode;
  uint32_t omode;
  /*
   * MOC_IP_ADDRESS_S dwDestIP[CIPSEC_MAX_TS], dwDestIPEnd[CIPSEC_MAX_TS];  private destination IP range; tunnel mode only 
   */
  size_t n_dwdestip;
  ProtobufCBinaryData *dwdestip;
  size_t n_dwdestipend;
  ProtobufCBinaryData *dwdestipend;
  /*
   * MOC_IP_ADDRESS_S dwSrcIP[CIPSEC_MAX_TS], dwSrcIPEnd[CIPSEC_MAX_TS];  private source IP range; tunnel mode only 
   */
  size_t n_dwsrcip;
  ProtobufCBinaryData *dwsrcip;
  size_t n_dwsrcipend;
  ProtobufCBinaryData *dwsrcipend;
  /*
   * authentication algorithm ID; 0=none or N/A, see "ipsec_defs.h" 
   */
  protobuf_c_boolean has_oauthalgo;
  uint32_t oauthalgo;
  /*
   * ubyte*  poAuthKey;  authentication key 
   */
  protobuf_c_boolean has_poauthkey;
  ProtobufCBinaryData poauthkey;
  /*
   * authentication key length (in bytes) 
   */
  protobuf_c_boolean has_wauthkeylen;
  uint32_t wauthkeylen;
  /*
   * encryption algorithm ID; 0=none or N/A, see "ipsec_defs.h" 
   */
  protobuf_c_boolean has_oencralgo;
  uint32_t oencralgo;
  /*
   * ubyte*  poEncrKey; encryption key 
   */
  protobuf_c_boolean has_poencrkey;
  ProtobufCBinaryData poencrkey;
  /*
   * encryption key length (in bytes) 
   */
  protobuf_c_boolean has_wencrkeylen;
  uint32_t wencrkeylen;
  /*
   * tag size (in bytes) for ESP Aead algo; e.g. 16, 12, 8, or 0=N/A 
   */
  protobuf_c_boolean has_oaeadicvlen;
  uint32_t oaeadicvlen;
  /*
   * expire after so many seconds elasped 
   */
  protobuf_c_boolean has_dwexpsecs;
  uint32_t dwexpsecs;
  /*
   * expire after so many kbytes passed 
   */
  protobuf_c_boolean has_dwexpkbytes;
  uint32_t dwexpkbytes;
  /*
   * parent IKE_SA's internal ID 
   */
  protobuf_c_boolean has_dwikesaid;
  uint32_t dwikesaid;
  /*
   * ubyte   poCky_ib[IKE_COOKIE_SIZE]; parent's inbound cookie 
   */
  protobuf_c_boolean has_pocky;
  ProtobufCBinaryData pocky;
  /*
   * parent IKE_SA's locator 
   */
  protobuf_c_boolean has_ikesaloc;
  int32_t ikesaloc;
  /*
   * time elapsed (in ms) since quick mode start 
   */
  protobuf_c_boolean has_dwtimestart;
  uint32_t dwtimestart;
  /*
   * system uptime (in ms) when this SA was established,
   *this is the point of time when the IPsec SA pairs were created in crypto_cb,
   *a little later than the IKE SA's 
   */
  protobuf_c_boolean has_dwsaestablished;
  uint32_t dwsaestablished;
  protobuf_c_boolean has_dwlastrekeyattempt;
  uint32_t dwlastrekeyattempt;
  protobuf_c_boolean has_dwidrekeyprev;
  uint32_t dwidrekeyprev;
  /*
   * MOC_IP_ADDRESS_S  dwPeerAddrRemote; 
   */
  protobuf_c_boolean has_dwpeeraddrremote;
  ProtobufCBinaryData dwpeeraddrremote;
  /*
   *service-specific data (e.g. application key used to link SA to app during recovery), transparent to IPSEC 
   */
  protobuf_c_boolean has_epdg_handle;
  uint32_t epdg_handle;
};
#define HA_CHILD_KEY_EX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_child_key_ex__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0 }


struct  _HaChildStat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dwseqnbrinc;
  uint32_t dwseqnbrinc;
  /*
   * current count of bytes < 1k 
   */
  protobuf_c_boolean has_wsacurbytes;
  uint32_t wsacurbytes;
  /*
   * current count of kbytes 
   */
  protobuf_c_boolean has_dwsacurkbytes;
  uint32_t dwsacurkbytes;
  /*
   * expire after so many kbytes processed 
   */
  protobuf_c_boolean has_dwsaexpkbytes;
  uint32_t dwsaexpkbytes;
  /*
   * number of packets gone through this SA 
   */
  protobuf_c_boolean has_dwsatotpackets;
  uint32_t dwsatotpackets;
  /*
   * number of packets processed 
   */
  protobuf_c_boolean has_dwsacurpackets;
  uint32_t dwsacurpackets;
  /*
   * system uptime (in ms) when this SA was last used 
   */
  protobuf_c_boolean has_dwsalastused;
  uint32_t dwsalastused;
  /*
   * system uptime (in ms) when
   *[outbound] first used after its mirrored inbound SA was last used OR
   *[inbound] IKE was last informed of this SA's connection or deletion
   */
  protobuf_c_boolean has_dwsafirstused;
  uint32_t dwsafirstused;
  /*
   * system uptime (in ms) at
   *[outbound] last rekeying attempt OR [inbound] deletion
   */
  protobuf_c_boolean has_dwsalastrekey;
  uint32_t dwsalastrekey;
  /*
   * sequence number (outbound) or starting seq. # of the replay window (inbound) 
   */
  protobuf_c_boolean has_dwseqnbr;
  uint32_t dwseqnbr;
  /*
   * predecessor
   */
  protobuf_c_boolean has_dwidrekeyprev;
  uint32_t dwidrekeyprev;
  /*
   * successor
   */
  protobuf_c_boolean has_dwidrekeynext;
  uint32_t dwidrekeynext;
};
#define HA_CHILD_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_child_stat__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _HaSwmDiam
{
  ProtobufCMessage base;
  protobuf_c_boolean has_diamapphhid;
  uint32_t diamapphhid;
  protobuf_c_boolean has_diamappeteid;
  uint32_t diamappeteid;
  protobuf_c_boolean has_sessionidhigh32bits;
  uint32_t sessionidhigh32bits;
};
#define HA_SWM_DIAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_swm_diam__descriptor) \
    , 0,0, 0,0, 0,0 }


/*
 ***** RsrcMgr HA: *****************************************************************
 */
struct  _HaIppool
{
  ProtobufCMessage base;
  ProtobufCBinaryData allocatedipaddr;
  protobuf_c_boolean has_allocatedipprefixlen;
  uint32_t allocatedipprefixlen;
  /*
   *cfg has it too, keep it for code consistency 
   */
  protobuf_c_boolean has_ippoolvrfid;
  uint32_t ippoolvrfid;
  protobuf_c_boolean has_requesterpeeripaddr;
  ProtobufCBinaryData requesterpeeripaddr;
  protobuf_c_boolean has_requesterpeerport;
  uint32_t requesterpeerport;
  protobuf_c_boolean has_requestersaid;
  uint32_t requestersaid;
};
#define HA_IPPOOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ippool__descriptor) \
    , {0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0 }


/*
 ***** ePDG Manager HA *************************************************************
 */
struct  _HaEpdgSessionCommon
{
  ProtobufCMessage base;
  uint32_t lbi;
  uint32_t rattype;
  uint32_t selmode;
  ProtobufCBinaryData servingnetwork;
  uint32_t pdntype;
  ProtobufCBinaryData paa;
  ProtobufCBinaryData dns_ip;
  ProtobufCBinaryData apn;
  uint32_t apn_cfg_index;
  ProtobufCBinaryData indication;
  uint32_t pti;
  uint32_t session_id;
  uint32_t state;
  uint32_t sub_state;
  uint32_t sub_state_flag;
  ProtobufCBinaryData s2btunnel;
  uint32_t ipseccp_sit;
  uint32_t ipseccpmgr_handle;
};
#define HA_EPDG_SESSION_COMMON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_epdg_session_common__descriptor) \
    , 0, 0, 0, {0,NULL}, 0, {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL}, 0, 0, 0, 0, 0, {0,NULL}, 0, 0 }


struct  _HaEpdgSessionUe
{
  ProtobufCMessage base;
  ProtobufCBinaryData imsi;
  ProtobufCBinaryData msisdn;
  ProtobufCBinaryData mei;
  ProtobufCBinaryData ue_uli;
  uint32_t apn_restriction;
  ProtobufCBinaryData time_zone;
  ProtobufCBinaryData trace_ctrl;
};
#define HA_EPDG_SESSION_UE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_epdg_session_ue__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL}, {0,NULL} }


struct  _HaEpdgSessionApnAmbr
{
  ProtobufCMessage base;
  uint32_t max_uplink;
  uint32_t max_downlink;
};
#define HA_EPDG_SESSION_APN_AMBR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_epdg_session_apn_ambr__descriptor) \
    , 0, 0 }


struct  _HaEpdgBearerCommon
{
  ProtobufCMessage base;
  protobuf_c_boolean is_valid;
  protobuf_c_boolean is_default;
  protobuf_c_boolean is_gbr;
  protobuf_c_boolean gating_status;
  uint32_t state_prv;
  uint32_t state;
  uint32_t lbi;
  uint32_t ebi;
  ProtobufCBinaryData bearer_teid;
  ProtobufCBinaryData s2b_bearer;
  uint32_t teid_c;
  uint32_t bearer_id;
};
#define HA_EPDG_BEARER_COMMON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_epdg_bearer_common__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, {0,NULL}, 0, 0 }


struct  _HaEpdgBearerQos
{
  ProtobufCMessage base;
  protobuf_c_boolean has_qos;
  ProtobufCBinaryData qos;
  protobuf_c_boolean has_bearer_tft;
  ProtobufCBinaryData bearer_tft;
  protobuf_c_boolean has_tft_id_flags;
  ProtobufCBinaryData tft_id_flags;
};
#define HA_EPDG_BEARER_QOS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_epdg_bearer_qos__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


/*
 ***** HenbGW S1mmemgr Instance_Data***************************************************
 */
struct  _HaS1mmeInstCfg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_application_id;
  uint32_t application_id;
  /*
   *cfg has it too, keep it for code consistency 
   */
  protobuf_c_boolean has_mic_mm_gid_slot;
  uint32_t mic_mm_gid_slot;
  protobuf_c_boolean has_x2_application_id;
  uint32_t x2_application_id;
  protobuf_c_boolean has_mic_mm_sctp_x2_listener;
  uint32_t mic_mm_sctp_x2_listener;
};
#define HA_S1MME_INST_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_inst_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 ***** HenbGW S1mmemgr Lenb_Data***************************************************
 */
struct  _HaS1mmeLenb
{
  ProtobufCMessage base;
  uint32_t lenb_index;
  uint32_t lenb_type;
  uint32_t lenb_vrf_id;
  uint32_t lenb_id;
  ProtobufCBinaryData lenb_name;
  ProtobufCBinaryData lenb_ipaddr;
};
#define HA_S1MME_LENB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_lenb__descriptor) \
    , 0, 0, 0, 0, {0,NULL}, {0,NULL} }


/*
 ***** HenbGW S1mmemgr MMECB_Data***************************************************
 */
struct  _HaS1mmeMmeCb
{
  ProtobufCMessage base;
  uint32_t mme_index;
  uint32_t association_id;
  uint32_t mme_sctp_port;
  uint32_t association_state;
  uint32_t s1ap_setup_state;
  uint32_t mme_relative_capacity;
  protobuf_c_boolean relative_mmecapacity_present;
  protobuf_c_boolean mmename_present;
  protobuf_c_boolean served_gummeis_present;
  uint64_t mme_sctp_stchg_ts;
  uint64_t mme_s1ap_stchg_ts;
  ProtobufCBinaryData mme_name;
  ProtobufCBinaryData mme_ip;
  ProtobufCBinaryData tailist_name;
};
#define HA_S1MME_MME_CB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_mme_cb__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, {0,NULL}, {0,NULL} }


/*
 ***** HenbGW S1mmemgr MME_Plmn_Data***************************************************
 */
struct  _HaS1mmeMmePlmn
{
  ProtobufCMessage base;
  uint32_t mme_index;
  uint32_t gummeis_item_index;
  uint32_t gummeis_item_count;
  uint32_t plmnidentity_count;
  ProtobufCBinaryData s1ap_plmnidentity;
};
#define HA_S1MME_MME_PLMN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_mme_plmn__descriptor) \
    , 0, 0, 0, 0, {0,NULL} }


/*
 ***** HenbGW S1mmemgr MME_MMECS_Data***************************************************
 */
struct  _HaS1mmeMmeMmecs
{
  ProtobufCMessage base;
  uint32_t mme_index;
  uint32_t gummeis_item_index;
  uint32_t gummeis_item_count;
  uint32_t mme_code_count;
  ProtobufCBinaryData s1ap_mme_code;
};
#define HA_S1MME_MME_MMECS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_mme_mmecs__descriptor) \
    , 0, 0, 0, 0, {0,NULL} }


/*
 ***** HenbGW S1mmemgr MME_GroupId_Data***************************************************
 */
struct  _HaS1mmeMmeGroupid
{
  ProtobufCMessage base;
  uint32_t mme_index;
  uint32_t gummeis_item_index;
  uint32_t gummeis_item_count;
  uint32_t mme_group_id_count;
  ProtobufCBinaryData s1ap_mme_group_id;
};
#define HA_S1MME_MME_GROUPID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_mme_groupid__descriptor) \
    , 0, 0, 0, 0, {0,NULL} }


/*
 ***** HenbGW S1mmemgr_SuptTai_Data***************************************************
 */
struct  _HaS1mmeSuptdTai
{
  ProtobufCMessage base;
  uint32_t lenb_index;
  ProtobufCBinaryData henbmgr_gid;
  ProtobufCBinaryData tai;
  protobuf_c_boolean allowed;
};
#define HA_S1MME_SUPTD_TAI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_suptd_tai__descriptor) \
    , 0, {0,NULL}, {0,NULL}, 0 }


/*
 ***** HenbGW S1mmemgr_HenbCb_Data***************************************************
 */
struct  _HaS1mmeHenbCb
{
  ProtobufCMessage base;
  uint32_t henb_s1ap_id;
  uint32_t lenb_index;
  ProtobufCBinaryData henb_global_enb_id;
  ProtobufCBinaryData henb_name;
};
#define HA_S1MME_HENB_CB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_henb_cb__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL} }


/*
 ***** HenbGW S1mmemgr_X2_HenbCb_Data***************************************************
 */
struct  _HaS1mmeX2Henb
{
  ProtobufCMessage base;
  ProtobufCBinaryData global_enb_id;
  ProtobufCBinaryData henb_ip;
  uint32_t henb_port;
  uint32_t henb_s1ap_id;
  uint32_t henb_x2ap_id;
  uint32_t lenb_index;
  protobuf_c_boolean sctp_up;
  protobuf_c_boolean x2ap_up;
  protobuf_c_boolean have_tnl;
  ProtobufCBinaryData trnspt_layer_add;
  uint32_t nbr_enbs_count;
  ProtobufCBinaryData nbr_enbs;
};
#define HA_S1MME_X2_HENB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_x2_henb__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, 0, {0,NULL} }


/*
 ***** HenbGW S1mmemgr_X2_EnbCb_Data***************************************************
 */
struct  _HaS1mmeX2Enb
{
  ProtobufCMessage base;
  ProtobufCBinaryData global_enb_id;
  ProtobufCBinaryData rmt_ip;
  uint32_t rmt_port;
  uint32_t assoc_id;
  protobuf_c_boolean flow_up;
  protobuf_c_boolean sctp_up;
  protobuf_c_boolean x2ap_up;
  protobuf_c_boolean have_geid;
  protobuf_c_boolean have_ip;
  protobuf_c_boolean have_tnl;
  ProtobufCBinaryData trnspt_layer_add;
  uint32_t nbr_henbs_count;
  ProtobufCBinaryData nbr_henbs;
};
#define HA_S1MME_X2_ENB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_x2_enb__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, 0, {0,NULL} }


/*
 ***** HenbGW S1mmemgr_X2_ServedCell_Data***************************************************
 */
struct  _HaS1mmeX2ServedCell
{
  ProtobufCMessage base;
  ProtobufCBinaryData served_cell;
};
#define HA_S1MME_X2_SERVED_CELL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_x2_served_cell__descriptor) \
    , {0,NULL} }


/*
 ***** HenbGW Ltegw Sctp Glb Data***********************************************************
 */
struct  _HaS1mmeSctpRedGlbData
{
  ProtobufCMessage base;
  uint32_t pmtu_timer_rem_time;
  uint32_t max_ep;
  uint32_t max_appl;
  uint32_t max_assoc;
  uint32_t min_tx_buffers;
  uint32_t med_tx_buffers;
  uint32_t max_tx_buffers;
  uint32_t min_rx_buffers;
  uint32_t med_rx_buffers;
  uint32_t max_rx_buffers;
  uint32_t min_reserve_buffers;
  uint32_t med_reserve_buffers;
  uint32_t max_reserve_buffers;
  uint32_t max_streams_per_assoc;
  uint32_t init_in_streams;
  uint32_t init_out_streams;
  uint32_t standard_udp_port;
  ProtobufCBinaryData old_mac_key;
  ProtobufCBinaryData current_mac_key;
  size_t n_active_appl_list;
  uint32_t *active_appl_list;
  size_t n_addr_list;
  ProtobufCBinaryData *addr_list;
  protobuf_c_boolean has_sctp_def_prot_params;
  ProtobufCBinaryData sctp_def_prot_params;
  protobuf_c_boolean has_trx_cong_reg_def;
  ProtobufCBinaryData trx_cong_reg_def;
  protobuf_c_boolean has_rcv_cong_reg_def;
  ProtobufCBinaryData rcv_cong_reg_def;
  /*
   *Listener
   */
  /*
   * number of listeners
   */
  size_t n_listener_ep_id;
  uint32_t *listener_ep_id;
};
#define HA_S1MME_SCTP_RED_GLB_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_sctp_red_glb_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, {0,NULL}, 0,NULL, 0,NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,NULL }


struct  _HaS1mmeSctpRedGlbEp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_active_ep;
  uint32_t num_active_ep;
  protobuf_c_boolean has_num_in_use_ep;
  uint32_t num_in_use_ep;
  protobuf_c_boolean has_last_allocated_ep;
  uint32_t last_allocated_ep;
  size_t n_active_ep_list;
  uint32_t *active_ep_list;
};
#define HA_S1MME_SCTP_RED_GLB_EP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_sctp_red_glb_ep__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL }


struct  _HaS1mmeSctpRedGlbPmtu
{
  ProtobufCMessage base;
  size_t n_red_pmtu_snapshot_db;
  ProtobufCBinaryData *red_pmtu_snapshot_db;
};
#define HA_S1MME_SCTP_RED_GLB_PMTU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_sctp_red_glb_pmtu__descriptor) \
    , 0,NULL }


struct  _HaS1mmeSctpRedEpData
{
  ProtobufCMessage base;
  uint32_t ep_status;
  uint32_t ep_id;
  uint32_t server_ep_id;
  uint32_t num_created_ep;
  uint32_t ppi;
  uint32_t n_assoc;
  uint32_t last_used_assoc;
  uint32_t this_port;
  uint32_t naddr;
  uint32_t l_backlog;
  uint32_t flags;
  uint32_t trc_flags;
  uint32_t appl_id;
  uint32_t sk_type;
  uint32_t moribund;
  uint32_t cong_flag;
  protobuf_c_boolean hostname_supported;
  protobuf_c_boolean create_from_server;
  protobuf_c_boolean has_created_ep_id;
  ProtobufCBinaryData created_ep_id;
  protobuf_c_boolean has_sk_config;
  ProtobufCBinaryData sk_config;
  protobuf_c_boolean has_trx_cong_reg_def;
  ProtobufCBinaryData trx_cong_reg_def;
  protobuf_c_boolean has_rcv_cong_reg_def;
  ProtobufCBinaryData rcv_cong_reg_def;
  size_t n_this_address;
  ProtobufCBinaryData *this_address;
  protobuf_c_boolean has_hostname;
  ProtobufCBinaryData hostname;
  protobuf_c_boolean has_family;
  ProtobufCBinaryData family;
  protobuf_c_boolean has_l_onoff;
  uint32_t l_onoff;
  protobuf_c_boolean has_l_linger;
  uint32_t l_linger;
  uint32_t assoc_id;
};
#define HA_S1MME_SCTP_RED_EP_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_sctp_red_ep_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,NULL, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0 }


/*
 *assoc_red_obj
 */
struct  _HaS1mmeSctpRedEpAssocobj
{
  ProtobufCMessage base;
  uint32_t ep_id;
  uint32_t assoc_id;
  uint32_t open;
  uint32_t state;
  uint32_t init_retry;
  uint32_t init_retry_per_path;
  uint32_t cookie_retry;
  uint32_t shutdown_retry;
  uint32_t shutdown_ack_retry;
  uint32_t error_count;
  uint32_t configured_local_primary_address_index;
  uint32_t local_tag;
  uint32_t remote_tag;
  uint32_t local_virtual_tie_tag;
  uint32_t peer_virtual_tie_tag;
  uint32_t total_sent;
  uint32_t cookie_size;
  protobuf_c_boolean zero_win_prob_on;
  protobuf_c_boolean conn_accepted;
  protobuf_c_boolean has_remain_time;
  ProtobufCBinaryData remain_time;
  protobuf_c_boolean has_timer_event;
  ProtobufCBinaryData timer_event;
  protobuf_c_boolean has_addr_index;
  ProtobufCBinaryData addr_index;
  protobuf_c_boolean has_trx_cong_reg_def;
  ProtobufCBinaryData trx_cong_reg_def;
  protobuf_c_boolean has_rcv_cong_reg_def;
  ProtobufCBinaryData rcv_cong_reg_def;
  protobuf_c_boolean has_restart_option;
  ProtobufCBinaryData restart_option;
  protobuf_c_boolean has_partial_data;
  ProtobufCBinaryData partial_data;
  protobuf_c_boolean has_ecn;
  ProtobufCBinaryData ecn;
  protobuf_c_boolean has_transmit;
  ProtobufCBinaryData transmit;
  protobuf_c_boolean has_receive;
  ProtobufCBinaryData receive;
  protobuf_c_boolean has_config;
  ProtobufCBinaryData config;
};
#define HA_S1MME_SCTP_RED_EP_ASSOCOBJ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_s1mme_sctp_red_ep_assocobj__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


/*
 ***** HenbGW Henbmgr*****************************************************************
 */
struct  _HaHenbmInstCfg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hm_gid_slot;
  uint32_t hm_gid_slot;
  protobuf_c_boolean has_hm_inst;
  uint32_t hm_inst;
  protobuf_c_boolean has_mm_gid_slot;
  uint32_t mm_gid_slot;
  protobuf_c_boolean has_mm_inst;
  uint32_t mm_inst;
  protobuf_c_boolean has_hm_logging_level;
  uint32_t hm_logging_level;
  protobuf_c_boolean has_hm_sctp_appid;
  uint32_t hm_sctp_appid;
  protobuf_c_boolean has_hm_sctp_listener;
  uint32_t hm_sctp_listener;
  /*
   * x2 ha
   */
  protobuf_c_boolean has_hm_x2_sctp_appid;
  uint32_t hm_x2_sctp_appid;
  protobuf_c_boolean has_hm_x2_sctp_listener;
  uint32_t hm_x2_sctp_listener;
};
#define HA_HENBM_INST_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henbm_inst_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _HaHenbDataCb
{
  ProtobufCMessage base;
  protobuf_c_boolean has_henb_dflt_paging_drx;
  uint32_t henb_dflt_paging_drx;
  protobuf_c_boolean has_henb_name_len;
  uint32_t henb_name_len;
  protobuf_c_boolean has_henb_access_mode;
  uint32_t henb_access_mode;
  protobuf_c_boolean has_henb_sctp_port;
  uint32_t henb_sctp_port;
  protobuf_c_boolean has_henb_states;
  uint32_t henb_states;
  protobuf_c_boolean has_henb_sctp_assoc_id;
  uint32_t henb_sctp_assoc_id;
  protobuf_c_boolean has_henb_ip;
  ProtobufCBinaryData henb_ip;
  protobuf_c_boolean has_mme_index;
  uint32_t mme_index;
  protobuf_c_boolean has_lenb_id;
  uint32_t lenb_id;
  /*
   * henb's global enb-id 
   */
  /*
   * 3-byte
   */
  protobuf_c_boolean has_henb_plmnid;
  ProtobufCBinaryData henb_plmnid;
  /*
   * 1-byte
   */
  protobuf_c_boolean has_henb_enb_id_type;
  uint32_t henb_enb_id_type;
  /*
   * 4-byte
   */
  protobuf_c_boolean has_henb_enb_id;
  ProtobufCBinaryData henb_enb_id;
  protobuf_c_boolean has_henb_s1ap_id;
  uint32_t henb_s1ap_id;
  /*
   * actually an array
   */
  protobuf_c_boolean has_henb_name;
  ProtobufCBinaryData henb_name;
};
#define HA_HENB_DATA_CB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_data_cb__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL} }


struct  _HaHenbDataCsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_henb_s1ap_id;
  uint32_t henb_s1ap_id;
  /*
   * 27-bit string, high bits
   */
  size_t n_henb_csg_id;
  ProtobufCBinaryData *henb_csg_id;
};
#define HA_HENB_DATA_CSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_data_csg__descriptor) \
    , 0,0, 0,NULL }


struct  _HaHenbDataTai
{
  ProtobufCMessage base;
  protobuf_c_boolean has_henb_s1ap_id;
  uint32_t henb_s1ap_id;
  size_t n_henb_tai_plmn;
  ProtobufCBinaryData *henb_tai_plmn;
  size_t n_henb_tai_tac;
  ProtobufCBinaryData *henb_tai_tac;
};
#define HA_HENB_DATA_TAI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_data_tai__descriptor) \
    , 0,0, 0,NULL, 0,NULL }


struct  _HaUeDataCb
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mme_ue_s1ap_id;
  uint32_t mme_ue_s1ap_id;
  protobuf_c_boolean has_gw_ue_s1ap_id;
  uint32_t gw_ue_s1ap_id;
  protobuf_c_boolean has_enb_ue_s1ap_id;
  uint32_t enb_ue_s1ap_id;
  protobuf_c_boolean has_ue_enb_s1ap_id;
  uint32_t ue_enb_s1ap_id;
  protobuf_c_boolean has_mme_index;
  uint32_t mme_index;
  protobuf_c_boolean has_num_erabs;
  uint32_t num_erabs;
  protobuf_c_boolean has_guard_timer_in_use;
  uint32_t guard_timer_in_use;
  protobuf_c_boolean has_imsi_tmsi_info;
  ProtobufCBinaryData imsi_tmsi_info;
  /*
   *henbmgr_ue_ambr_t :No separate into the message 
   */
  protobuf_c_boolean has_ue_ul_ambr;
  uint64_t ue_ul_ambr;
  protobuf_c_boolean has_ue_dl_ambr;
  uint64_t ue_dl_ambr;
  protobuf_c_boolean has_transient_ue_ul_ambr;
  uint64_t transient_ue_ul_ambr;
  protobuf_c_boolean has_transient_ue_dl_ambr;
  uint64_t transient_ue_dl_ambr;
  /*
   *NO separate message
   *  repeated HaUeErabInfo     ue_erab_info  =13;
   */
  size_t n_ue_erab_info;
  ProtobufCBinaryData *ue_erab_info;
};
#define HA_UE_DATA_CB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ue_data_cb__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _HaTeDataCb
{
  ProtobufCMessage base;
  protobuf_c_boolean has_te_qos_set;
  uint32_t te_qos_set;
  protobuf_c_boolean has_transient_erab_qos_set;
  uint32_t transient_erab_qos_set;
  protobuf_c_boolean has_te_lclid;
  uint32_t te_lclid;
  /*
   * SGW tunnel end address
   */
  protobuf_c_boolean has_te_ul_addr;
  ProtobufCBinaryData te_ul_addr;
  /*
   * SGW tunnel end id
   */
  protobuf_c_boolean has_te_ul_id;
  uint32_t te_ul_id;
  /*
   * HeNB tunnel end address
   */
  protobuf_c_boolean has_te_dl_addr;
  ProtobufCBinaryData te_dl_addr;
  /*
   * HeNB tunnel end id
   */
  protobuf_c_boolean has_te_dl_id;
  uint32_t te_dl_id;
  /*
   *HaTeGtpuStat use other table 
   */
  protobuf_c_boolean has_ul_stats;
  ProtobufCBinaryData ul_stats;
  protobuf_c_boolean has_dl_stats;
  ProtobufCBinaryData dl_stats;
  protobuf_c_boolean has_te_qos;
  ProtobufCBinaryData te_qos;
  protobuf_c_boolean has_transient_erab_qos;
  ProtobufCBinaryData transient_erab_qos;
};
#define HA_TE_DATA_CB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_te_data_cb__descriptor) \
    , 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _HaGtpuStat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tt_pkts_rcvd;
  uint64_t tt_pkts_rcvd;
  protobuf_c_boolean has_tt_bytes_rcvd;
  uint64_t tt_bytes_rcvd;
  protobuf_c_boolean has_tt_pkts_sent;
  uint64_t tt_pkts_sent;
  protobuf_c_boolean has_tt_bytes_sent;
  uint64_t tt_bytes_sent;
  protobuf_c_boolean has_tt_pkts_dropped_no_egress_te;
  uint64_t tt_pkts_dropped_no_egress_te;
  protobuf_c_boolean has_tt_bytes_dropped_no_egress_te;
  uint64_t tt_bytes_dropped_no_egress_te;
  protobuf_c_boolean has_tt_pkts_dropped_send_failure;
  uint64_t tt_pkts_dropped_send_failure;
  protobuf_c_boolean has_tt_bytes_dropped_send_failure;
  uint64_t tt_bytes_dropped_send_failure;
};
#define HA_GTPU_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_gtpu_stat__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _HaX2HenbDataCb
{
  ProtobufCMessage base;
  protobuf_c_boolean has_henb_sctp_port;
  uint32_t henb_sctp_port;
  protobuf_c_boolean has_henb_ip;
  ProtobufCBinaryData henb_ip;
  protobuf_c_boolean has_henb_sctp_assoc_id;
  uint32_t henb_sctp_assoc_id;
  /*
   * henb's global enb-id 
   */
  /*
   * 3-byte
   */
  protobuf_c_boolean has_henb_plmnid;
  ProtobufCBinaryData henb_plmnid;
  /*
   * 1-byte
   */
  protobuf_c_boolean has_henb_enb_id_type;
  uint32_t henb_enb_id_type;
  /*
   * 4-byte
   */
  protobuf_c_boolean has_henb_enb_id;
  ProtobufCBinaryData henb_enb_id;
  protobuf_c_boolean has_henb_s1ap_id;
  uint32_t henb_s1ap_id;
  protobuf_c_boolean has_henb_x2ap_id;
  uint32_t henb_x2ap_id;
  /*
   *states
   */
  protobuf_c_boolean has_sctp_up;
  uint32_t sctp_up;
  protobuf_c_boolean has_x2ap_up;
  uint32_t x2ap_up;
  protobuf_c_boolean has_have_geid;
  uint32_t have_geid;
  protobuf_c_boolean has_have_assoc;
  uint32_t have_assoc;
  protobuf_c_boolean has_have_ip;
  uint32_t have_ip;
  protobuf_c_boolean has_have_s1ap;
  uint32_t have_s1ap;
  protobuf_c_boolean has_conn_req;
  uint32_t conn_req;
};
#define HA_X2_HENB_DATA_CB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_x2_henb_data_cb__descriptor) \
    , 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 *global data
 */
struct  _HaHenbSctpRedGlbData
{
  ProtobufCMessage base;
  uint32_t pmtu_timer_rem_time;
  uint32_t max_ep;
  uint32_t max_appl;
  uint32_t max_assoc;
  uint32_t min_tx_buffers;
  uint32_t med_tx_buffers;
  uint32_t max_tx_buffers;
  uint32_t min_rx_buffers;
  uint32_t med_rx_buffers;
  uint32_t max_rx_buffers;
  uint32_t min_reserve_buffers;
  uint32_t med_reserve_buffers;
  uint32_t max_reserve_buffers;
  uint32_t max_streams_per_assoc;
  uint32_t init_in_streams;
  uint32_t init_out_streams;
  uint32_t standard_udp_port;
  ProtobufCBinaryData old_mac_key;
  ProtobufCBinaryData current_mac_key;
  size_t n_active_appl_list;
  uint32_t *active_appl_list;
  size_t n_addr_list;
  ProtobufCBinaryData *addr_list;
  protobuf_c_boolean has_sctp_def_prot_params;
  ProtobufCBinaryData sctp_def_prot_params;
  protobuf_c_boolean has_trx_cong_reg_def;
  ProtobufCBinaryData trx_cong_reg_def;
  protobuf_c_boolean has_rcv_cong_reg_def;
  ProtobufCBinaryData rcv_cong_reg_def;
  /*
   *Listener
   */
  /*
   * number of listeners
   */
  size_t n_listener_ep_id;
  uint32_t *listener_ep_id;
};
#define HA_HENB_SCTP_RED_GLB_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_sctp_red_glb_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, {0,NULL}, 0,NULL, 0,NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,NULL }


struct  _HaHenbSctpRedGlbEp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_active_ep;
  uint32_t num_active_ep;
  protobuf_c_boolean has_num_in_use_ep;
  uint32_t num_in_use_ep;
  protobuf_c_boolean has_last_allocated_ep;
  uint32_t last_allocated_ep;
  size_t n_active_ep_list;
  uint32_t *active_ep_list;
};
#define HA_HENB_SCTP_RED_GLB_EP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_sctp_red_glb_ep__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL }


struct  _HaHenbSctpRedGlbPmtu
{
  ProtobufCMessage base;
  size_t n_red_pmtu_snapshot_db;
  ProtobufCBinaryData *red_pmtu_snapshot_db;
};
#define HA_HENB_SCTP_RED_GLB_PMTU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_sctp_red_glb_pmtu__descriptor) \
    , 0,NULL }


/*
 * ep data
 */
struct  _HaHenbSctpRedEpData
{
  ProtobufCMessage base;
  uint32_t ep_status;
  uint32_t ep_id;
  uint32_t server_ep_id;
  uint32_t num_created_ep;
  uint32_t ppi;
  uint32_t n_assoc;
  uint32_t last_used_assoc;
  uint32_t this_port;
  uint32_t naddr;
  uint32_t l_backlog;
  uint32_t flags;
  uint32_t trc_flags;
  uint32_t appl_id;
  uint32_t sk_type;
  uint32_t moribund;
  uint32_t cong_flag;
  protobuf_c_boolean hostname_supported;
  protobuf_c_boolean create_from_server;
  protobuf_c_boolean has_created_ep_id;
  ProtobufCBinaryData created_ep_id;
  protobuf_c_boolean has_sk_config;
  ProtobufCBinaryData sk_config;
  protobuf_c_boolean has_trx_cong_reg_def;
  ProtobufCBinaryData trx_cong_reg_def;
  protobuf_c_boolean has_rcv_cong_reg_def;
  ProtobufCBinaryData rcv_cong_reg_def;
  size_t n_this_address;
  ProtobufCBinaryData *this_address;
  protobuf_c_boolean has_hostname;
  ProtobufCBinaryData hostname;
  protobuf_c_boolean has_family;
  ProtobufCBinaryData family;
  protobuf_c_boolean has_l_onoff;
  uint32_t l_onoff;
  protobuf_c_boolean has_l_linger;
  uint32_t l_linger;
  uint32_t assoc_id;
};
#define HA_HENB_SCTP_RED_EP_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_sctp_red_ep_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,NULL, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0 }


/*
 *assoc_red_obj
 */
struct  _HaHenbSctpRedEpAssocobj
{
  ProtobufCMessage base;
  uint32_t ep_id;
  uint32_t assoc_id;
  uint32_t open;
  uint32_t state;
  uint32_t init_retry;
  uint32_t init_retry_per_path;
  uint32_t cookie_retry;
  uint32_t shutdown_retry;
  uint32_t shutdown_ack_retry;
  uint32_t error_count;
  uint32_t configured_local_primary_address_index;
  uint32_t local_tag;
  uint32_t remote_tag;
  uint32_t local_virtual_tie_tag;
  uint32_t peer_virtual_tie_tag;
  uint32_t total_sent;
  uint32_t cookie_size;
  protobuf_c_boolean zero_win_prob_on;
  protobuf_c_boolean conn_accepted;
  protobuf_c_boolean has_remain_time;
  ProtobufCBinaryData remain_time;
  protobuf_c_boolean has_timer_event;
  ProtobufCBinaryData timer_event;
  protobuf_c_boolean has_addr_index;
  ProtobufCBinaryData addr_index;
  protobuf_c_boolean has_trx_cong_reg_def;
  ProtobufCBinaryData trx_cong_reg_def;
  protobuf_c_boolean has_rcv_cong_reg_def;
  ProtobufCBinaryData rcv_cong_reg_def;
  protobuf_c_boolean has_restart_option;
  ProtobufCBinaryData restart_option;
  protobuf_c_boolean has_partial_data;
  ProtobufCBinaryData partial_data;
  protobuf_c_boolean has_ecn;
  ProtobufCBinaryData ecn;
  protobuf_c_boolean has_transmit;
  ProtobufCBinaryData transmit;
  protobuf_c_boolean has_receive;
  ProtobufCBinaryData receive;
  protobuf_c_boolean has_config;
  ProtobufCBinaryData config;
};
#define HA_HENB_SCTP_RED_EP_ASSOCOBJ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_henb_sctp_red_ep_assocobj__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


/*
 * db/row change notification 
 */
struct  _HaChRowMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_event;
  HaChRowMsg__EVENT event;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  size_t n_column_id;
  int32_t *column_id;
};
#define HA_CH_ROW_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ha_ch_row_msg__descriptor) \
    , 0,0, 0,{0,NULL}, 0,NULL }


/* HaIpsecStartTime methods */
void   ha_ipsec_start_time__init
                     (HaIpsecStartTime         *message);
size_t ha_ipsec_start_time__get_packed_size
                     (const HaIpsecStartTime   *message);
size_t ha_ipsec_start_time__pack
                     (const HaIpsecStartTime   *message,
                      uint8_t             *out);
size_t ha_ipsec_start_time__pack_to_buffer
                     (const HaIpsecStartTime   *message,
                      ProtobufCBuffer     *buffer);
HaIpsecStartTime *
       ha_ipsec_start_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ipsec_start_time__free_unpacked
                     (HaIpsecStartTime *message,
                      ProtobufCAllocator *allocator);
/* HaIkePeer methods */
void   ha_ike_peer__init
                     (HaIkePeer         *message);
size_t ha_ike_peer__get_packed_size
                     (const HaIkePeer   *message);
size_t ha_ike_peer__pack
                     (const HaIkePeer   *message,
                      uint8_t             *out);
size_t ha_ike_peer__pack_to_buffer
                     (const HaIkePeer   *message,
                      ProtobufCBuffer     *buffer);
HaIkePeer *
       ha_ike_peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ike_peer__free_unpacked
                     (HaIkePeer *message,
                      ProtobufCAllocator *allocator);
/* HaIkeInfo methods */
void   ha_ike_info__init
                     (HaIkeInfo         *message);
size_t ha_ike_info__get_packed_size
                     (const HaIkeInfo   *message);
size_t ha_ike_info__pack
                     (const HaIkeInfo   *message,
                      uint8_t             *out);
size_t ha_ike_info__pack_to_buffer
                     (const HaIkeInfo   *message,
                      ProtobufCBuffer     *buffer);
HaIkeInfo *
       ha_ike_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ike_info__free_unpacked
                     (HaIkeInfo *message,
                      ProtobufCAllocator *allocator);
/* HaIkeEpdgCtx methods */
void   ha_ike_epdg_ctx__init
                     (HaIkeEpdgCtx         *message);
size_t ha_ike_epdg_ctx__get_packed_size
                     (const HaIkeEpdgCtx   *message);
size_t ha_ike_epdg_ctx__pack
                     (const HaIkeEpdgCtx   *message,
                      uint8_t             *out);
size_t ha_ike_epdg_ctx__pack_to_buffer
                     (const HaIkeEpdgCtx   *message,
                      ProtobufCBuffer     *buffer);
HaIkeEpdgCtx *
       ha_ike_epdg_ctx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ike_epdg_ctx__free_unpacked
                     (HaIkeEpdgCtx *message,
                      ProtobufCAllocator *allocator);
/* HaIkeStat methods */
void   ha_ike_stat__init
                     (HaIkeStat         *message);
size_t ha_ike_stat__get_packed_size
                     (const HaIkeStat   *message);
size_t ha_ike_stat__pack
                     (const HaIkeStat   *message,
                      uint8_t             *out);
size_t ha_ike_stat__pack_to_buffer
                     (const HaIkeStat   *message,
                      ProtobufCBuffer     *buffer);
HaIkeStat *
       ha_ike_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ike_stat__free_unpacked
                     (HaIkeStat *message,
                      ProtobufCAllocator *allocator);
/* HaChildInfo methods */
void   ha_child_info__init
                     (HaChildInfo         *message);
size_t ha_child_info__get_packed_size
                     (const HaChildInfo   *message);
size_t ha_child_info__pack
                     (const HaChildInfo   *message,
                      uint8_t             *out);
size_t ha_child_info__pack_to_buffer
                     (const HaChildInfo   *message,
                      ProtobufCBuffer     *buffer);
HaChildInfo *
       ha_child_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_child_info__free_unpacked
                     (HaChildInfo *message,
                      ProtobufCAllocator *allocator);
/* HaChildKeyEx methods */
void   ha_child_key_ex__init
                     (HaChildKeyEx         *message);
size_t ha_child_key_ex__get_packed_size
                     (const HaChildKeyEx   *message);
size_t ha_child_key_ex__pack
                     (const HaChildKeyEx   *message,
                      uint8_t             *out);
size_t ha_child_key_ex__pack_to_buffer
                     (const HaChildKeyEx   *message,
                      ProtobufCBuffer     *buffer);
HaChildKeyEx *
       ha_child_key_ex__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_child_key_ex__free_unpacked
                     (HaChildKeyEx *message,
                      ProtobufCAllocator *allocator);
/* HaChildStat methods */
void   ha_child_stat__init
                     (HaChildStat         *message);
size_t ha_child_stat__get_packed_size
                     (const HaChildStat   *message);
size_t ha_child_stat__pack
                     (const HaChildStat   *message,
                      uint8_t             *out);
size_t ha_child_stat__pack_to_buffer
                     (const HaChildStat   *message,
                      ProtobufCBuffer     *buffer);
HaChildStat *
       ha_child_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_child_stat__free_unpacked
                     (HaChildStat *message,
                      ProtobufCAllocator *allocator);
/* HaSwmDiam methods */
void   ha_swm_diam__init
                     (HaSwmDiam         *message);
size_t ha_swm_diam__get_packed_size
                     (const HaSwmDiam   *message);
size_t ha_swm_diam__pack
                     (const HaSwmDiam   *message,
                      uint8_t             *out);
size_t ha_swm_diam__pack_to_buffer
                     (const HaSwmDiam   *message,
                      ProtobufCBuffer     *buffer);
HaSwmDiam *
       ha_swm_diam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_swm_diam__free_unpacked
                     (HaSwmDiam *message,
                      ProtobufCAllocator *allocator);
/* HaIppool methods */
void   ha_ippool__init
                     (HaIppool         *message);
size_t ha_ippool__get_packed_size
                     (const HaIppool   *message);
size_t ha_ippool__pack
                     (const HaIppool   *message,
                      uint8_t             *out);
size_t ha_ippool__pack_to_buffer
                     (const HaIppool   *message,
                      ProtobufCBuffer     *buffer);
HaIppool *
       ha_ippool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ippool__free_unpacked
                     (HaIppool *message,
                      ProtobufCAllocator *allocator);
/* HaEpdgSessionCommon methods */
void   ha_epdg_session_common__init
                     (HaEpdgSessionCommon         *message);
size_t ha_epdg_session_common__get_packed_size
                     (const HaEpdgSessionCommon   *message);
size_t ha_epdg_session_common__pack
                     (const HaEpdgSessionCommon   *message,
                      uint8_t             *out);
size_t ha_epdg_session_common__pack_to_buffer
                     (const HaEpdgSessionCommon   *message,
                      ProtobufCBuffer     *buffer);
HaEpdgSessionCommon *
       ha_epdg_session_common__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_epdg_session_common__free_unpacked
                     (HaEpdgSessionCommon *message,
                      ProtobufCAllocator *allocator);
/* HaEpdgSessionUe methods */
void   ha_epdg_session_ue__init
                     (HaEpdgSessionUe         *message);
size_t ha_epdg_session_ue__get_packed_size
                     (const HaEpdgSessionUe   *message);
size_t ha_epdg_session_ue__pack
                     (const HaEpdgSessionUe   *message,
                      uint8_t             *out);
size_t ha_epdg_session_ue__pack_to_buffer
                     (const HaEpdgSessionUe   *message,
                      ProtobufCBuffer     *buffer);
HaEpdgSessionUe *
       ha_epdg_session_ue__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_epdg_session_ue__free_unpacked
                     (HaEpdgSessionUe *message,
                      ProtobufCAllocator *allocator);
/* HaEpdgSessionApnAmbr methods */
void   ha_epdg_session_apn_ambr__init
                     (HaEpdgSessionApnAmbr         *message);
size_t ha_epdg_session_apn_ambr__get_packed_size
                     (const HaEpdgSessionApnAmbr   *message);
size_t ha_epdg_session_apn_ambr__pack
                     (const HaEpdgSessionApnAmbr   *message,
                      uint8_t             *out);
size_t ha_epdg_session_apn_ambr__pack_to_buffer
                     (const HaEpdgSessionApnAmbr   *message,
                      ProtobufCBuffer     *buffer);
HaEpdgSessionApnAmbr *
       ha_epdg_session_apn_ambr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_epdg_session_apn_ambr__free_unpacked
                     (HaEpdgSessionApnAmbr *message,
                      ProtobufCAllocator *allocator);
/* HaEpdgBearerCommon methods */
void   ha_epdg_bearer_common__init
                     (HaEpdgBearerCommon         *message);
size_t ha_epdg_bearer_common__get_packed_size
                     (const HaEpdgBearerCommon   *message);
size_t ha_epdg_bearer_common__pack
                     (const HaEpdgBearerCommon   *message,
                      uint8_t             *out);
size_t ha_epdg_bearer_common__pack_to_buffer
                     (const HaEpdgBearerCommon   *message,
                      ProtobufCBuffer     *buffer);
HaEpdgBearerCommon *
       ha_epdg_bearer_common__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_epdg_bearer_common__free_unpacked
                     (HaEpdgBearerCommon *message,
                      ProtobufCAllocator *allocator);
/* HaEpdgBearerQos methods */
void   ha_epdg_bearer_qos__init
                     (HaEpdgBearerQos         *message);
size_t ha_epdg_bearer_qos__get_packed_size
                     (const HaEpdgBearerQos   *message);
size_t ha_epdg_bearer_qos__pack
                     (const HaEpdgBearerQos   *message,
                      uint8_t             *out);
size_t ha_epdg_bearer_qos__pack_to_buffer
                     (const HaEpdgBearerQos   *message,
                      ProtobufCBuffer     *buffer);
HaEpdgBearerQos *
       ha_epdg_bearer_qos__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_epdg_bearer_qos__free_unpacked
                     (HaEpdgBearerQos *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeInstCfg methods */
void   ha_s1mme_inst_cfg__init
                     (HaS1mmeInstCfg         *message);
size_t ha_s1mme_inst_cfg__get_packed_size
                     (const HaS1mmeInstCfg   *message);
size_t ha_s1mme_inst_cfg__pack
                     (const HaS1mmeInstCfg   *message,
                      uint8_t             *out);
size_t ha_s1mme_inst_cfg__pack_to_buffer
                     (const HaS1mmeInstCfg   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeInstCfg *
       ha_s1mme_inst_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_inst_cfg__free_unpacked
                     (HaS1mmeInstCfg *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeLenb methods */
void   ha_s1mme_lenb__init
                     (HaS1mmeLenb         *message);
size_t ha_s1mme_lenb__get_packed_size
                     (const HaS1mmeLenb   *message);
size_t ha_s1mme_lenb__pack
                     (const HaS1mmeLenb   *message,
                      uint8_t             *out);
size_t ha_s1mme_lenb__pack_to_buffer
                     (const HaS1mmeLenb   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeLenb *
       ha_s1mme_lenb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_lenb__free_unpacked
                     (HaS1mmeLenb *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeMmeCb methods */
void   ha_s1mme_mme_cb__init
                     (HaS1mmeMmeCb         *message);
size_t ha_s1mme_mme_cb__get_packed_size
                     (const HaS1mmeMmeCb   *message);
size_t ha_s1mme_mme_cb__pack
                     (const HaS1mmeMmeCb   *message,
                      uint8_t             *out);
size_t ha_s1mme_mme_cb__pack_to_buffer
                     (const HaS1mmeMmeCb   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeMmeCb *
       ha_s1mme_mme_cb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_mme_cb__free_unpacked
                     (HaS1mmeMmeCb *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeMmePlmn methods */
void   ha_s1mme_mme_plmn__init
                     (HaS1mmeMmePlmn         *message);
size_t ha_s1mme_mme_plmn__get_packed_size
                     (const HaS1mmeMmePlmn   *message);
size_t ha_s1mme_mme_plmn__pack
                     (const HaS1mmeMmePlmn   *message,
                      uint8_t             *out);
size_t ha_s1mme_mme_plmn__pack_to_buffer
                     (const HaS1mmeMmePlmn   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeMmePlmn *
       ha_s1mme_mme_plmn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_mme_plmn__free_unpacked
                     (HaS1mmeMmePlmn *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeMmeMmecs methods */
void   ha_s1mme_mme_mmecs__init
                     (HaS1mmeMmeMmecs         *message);
size_t ha_s1mme_mme_mmecs__get_packed_size
                     (const HaS1mmeMmeMmecs   *message);
size_t ha_s1mme_mme_mmecs__pack
                     (const HaS1mmeMmeMmecs   *message,
                      uint8_t             *out);
size_t ha_s1mme_mme_mmecs__pack_to_buffer
                     (const HaS1mmeMmeMmecs   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeMmeMmecs *
       ha_s1mme_mme_mmecs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_mme_mmecs__free_unpacked
                     (HaS1mmeMmeMmecs *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeMmeGroupid methods */
void   ha_s1mme_mme_groupid__init
                     (HaS1mmeMmeGroupid         *message);
size_t ha_s1mme_mme_groupid__get_packed_size
                     (const HaS1mmeMmeGroupid   *message);
size_t ha_s1mme_mme_groupid__pack
                     (const HaS1mmeMmeGroupid   *message,
                      uint8_t             *out);
size_t ha_s1mme_mme_groupid__pack_to_buffer
                     (const HaS1mmeMmeGroupid   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeMmeGroupid *
       ha_s1mme_mme_groupid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_mme_groupid__free_unpacked
                     (HaS1mmeMmeGroupid *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeSuptdTai methods */
void   ha_s1mme_suptd_tai__init
                     (HaS1mmeSuptdTai         *message);
size_t ha_s1mme_suptd_tai__get_packed_size
                     (const HaS1mmeSuptdTai   *message);
size_t ha_s1mme_suptd_tai__pack
                     (const HaS1mmeSuptdTai   *message,
                      uint8_t             *out);
size_t ha_s1mme_suptd_tai__pack_to_buffer
                     (const HaS1mmeSuptdTai   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeSuptdTai *
       ha_s1mme_suptd_tai__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_suptd_tai__free_unpacked
                     (HaS1mmeSuptdTai *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeHenbCb methods */
void   ha_s1mme_henb_cb__init
                     (HaS1mmeHenbCb         *message);
size_t ha_s1mme_henb_cb__get_packed_size
                     (const HaS1mmeHenbCb   *message);
size_t ha_s1mme_henb_cb__pack
                     (const HaS1mmeHenbCb   *message,
                      uint8_t             *out);
size_t ha_s1mme_henb_cb__pack_to_buffer
                     (const HaS1mmeHenbCb   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeHenbCb *
       ha_s1mme_henb_cb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_henb_cb__free_unpacked
                     (HaS1mmeHenbCb *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeX2Henb methods */
void   ha_s1mme_x2_henb__init
                     (HaS1mmeX2Henb         *message);
size_t ha_s1mme_x2_henb__get_packed_size
                     (const HaS1mmeX2Henb   *message);
size_t ha_s1mme_x2_henb__pack
                     (const HaS1mmeX2Henb   *message,
                      uint8_t             *out);
size_t ha_s1mme_x2_henb__pack_to_buffer
                     (const HaS1mmeX2Henb   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeX2Henb *
       ha_s1mme_x2_henb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_x2_henb__free_unpacked
                     (HaS1mmeX2Henb *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeX2Enb methods */
void   ha_s1mme_x2_enb__init
                     (HaS1mmeX2Enb         *message);
size_t ha_s1mme_x2_enb__get_packed_size
                     (const HaS1mmeX2Enb   *message);
size_t ha_s1mme_x2_enb__pack
                     (const HaS1mmeX2Enb   *message,
                      uint8_t             *out);
size_t ha_s1mme_x2_enb__pack_to_buffer
                     (const HaS1mmeX2Enb   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeX2Enb *
       ha_s1mme_x2_enb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_x2_enb__free_unpacked
                     (HaS1mmeX2Enb *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeX2ServedCell methods */
void   ha_s1mme_x2_served_cell__init
                     (HaS1mmeX2ServedCell         *message);
size_t ha_s1mme_x2_served_cell__get_packed_size
                     (const HaS1mmeX2ServedCell   *message);
size_t ha_s1mme_x2_served_cell__pack
                     (const HaS1mmeX2ServedCell   *message,
                      uint8_t             *out);
size_t ha_s1mme_x2_served_cell__pack_to_buffer
                     (const HaS1mmeX2ServedCell   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeX2ServedCell *
       ha_s1mme_x2_served_cell__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_x2_served_cell__free_unpacked
                     (HaS1mmeX2ServedCell *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeSctpRedGlbData methods */
void   ha_s1mme_sctp_red_glb_data__init
                     (HaS1mmeSctpRedGlbData         *message);
size_t ha_s1mme_sctp_red_glb_data__get_packed_size
                     (const HaS1mmeSctpRedGlbData   *message);
size_t ha_s1mme_sctp_red_glb_data__pack
                     (const HaS1mmeSctpRedGlbData   *message,
                      uint8_t             *out);
size_t ha_s1mme_sctp_red_glb_data__pack_to_buffer
                     (const HaS1mmeSctpRedGlbData   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeSctpRedGlbData *
       ha_s1mme_sctp_red_glb_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_sctp_red_glb_data__free_unpacked
                     (HaS1mmeSctpRedGlbData *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeSctpRedGlbEp methods */
void   ha_s1mme_sctp_red_glb_ep__init
                     (HaS1mmeSctpRedGlbEp         *message);
size_t ha_s1mme_sctp_red_glb_ep__get_packed_size
                     (const HaS1mmeSctpRedGlbEp   *message);
size_t ha_s1mme_sctp_red_glb_ep__pack
                     (const HaS1mmeSctpRedGlbEp   *message,
                      uint8_t             *out);
size_t ha_s1mme_sctp_red_glb_ep__pack_to_buffer
                     (const HaS1mmeSctpRedGlbEp   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeSctpRedGlbEp *
       ha_s1mme_sctp_red_glb_ep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_sctp_red_glb_ep__free_unpacked
                     (HaS1mmeSctpRedGlbEp *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeSctpRedGlbPmtu methods */
void   ha_s1mme_sctp_red_glb_pmtu__init
                     (HaS1mmeSctpRedGlbPmtu         *message);
size_t ha_s1mme_sctp_red_glb_pmtu__get_packed_size
                     (const HaS1mmeSctpRedGlbPmtu   *message);
size_t ha_s1mme_sctp_red_glb_pmtu__pack
                     (const HaS1mmeSctpRedGlbPmtu   *message,
                      uint8_t             *out);
size_t ha_s1mme_sctp_red_glb_pmtu__pack_to_buffer
                     (const HaS1mmeSctpRedGlbPmtu   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeSctpRedGlbPmtu *
       ha_s1mme_sctp_red_glb_pmtu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_sctp_red_glb_pmtu__free_unpacked
                     (HaS1mmeSctpRedGlbPmtu *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeSctpRedEpData methods */
void   ha_s1mme_sctp_red_ep_data__init
                     (HaS1mmeSctpRedEpData         *message);
size_t ha_s1mme_sctp_red_ep_data__get_packed_size
                     (const HaS1mmeSctpRedEpData   *message);
size_t ha_s1mme_sctp_red_ep_data__pack
                     (const HaS1mmeSctpRedEpData   *message,
                      uint8_t             *out);
size_t ha_s1mme_sctp_red_ep_data__pack_to_buffer
                     (const HaS1mmeSctpRedEpData   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeSctpRedEpData *
       ha_s1mme_sctp_red_ep_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_sctp_red_ep_data__free_unpacked
                     (HaS1mmeSctpRedEpData *message,
                      ProtobufCAllocator *allocator);
/* HaS1mmeSctpRedEpAssocobj methods */
void   ha_s1mme_sctp_red_ep_assocobj__init
                     (HaS1mmeSctpRedEpAssocobj         *message);
size_t ha_s1mme_sctp_red_ep_assocobj__get_packed_size
                     (const HaS1mmeSctpRedEpAssocobj   *message);
size_t ha_s1mme_sctp_red_ep_assocobj__pack
                     (const HaS1mmeSctpRedEpAssocobj   *message,
                      uint8_t             *out);
size_t ha_s1mme_sctp_red_ep_assocobj__pack_to_buffer
                     (const HaS1mmeSctpRedEpAssocobj   *message,
                      ProtobufCBuffer     *buffer);
HaS1mmeSctpRedEpAssocobj *
       ha_s1mme_sctp_red_ep_assocobj__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_s1mme_sctp_red_ep_assocobj__free_unpacked
                     (HaS1mmeSctpRedEpAssocobj *message,
                      ProtobufCAllocator *allocator);
/* HaHenbmInstCfg methods */
void   ha_henbm_inst_cfg__init
                     (HaHenbmInstCfg         *message);
size_t ha_henbm_inst_cfg__get_packed_size
                     (const HaHenbmInstCfg   *message);
size_t ha_henbm_inst_cfg__pack
                     (const HaHenbmInstCfg   *message,
                      uint8_t             *out);
size_t ha_henbm_inst_cfg__pack_to_buffer
                     (const HaHenbmInstCfg   *message,
                      ProtobufCBuffer     *buffer);
HaHenbmInstCfg *
       ha_henbm_inst_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henbm_inst_cfg__free_unpacked
                     (HaHenbmInstCfg *message,
                      ProtobufCAllocator *allocator);
/* HaHenbDataCb methods */
void   ha_henb_data_cb__init
                     (HaHenbDataCb         *message);
size_t ha_henb_data_cb__get_packed_size
                     (const HaHenbDataCb   *message);
size_t ha_henb_data_cb__pack
                     (const HaHenbDataCb   *message,
                      uint8_t             *out);
size_t ha_henb_data_cb__pack_to_buffer
                     (const HaHenbDataCb   *message,
                      ProtobufCBuffer     *buffer);
HaHenbDataCb *
       ha_henb_data_cb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_data_cb__free_unpacked
                     (HaHenbDataCb *message,
                      ProtobufCAllocator *allocator);
/* HaHenbDataCsg methods */
void   ha_henb_data_csg__init
                     (HaHenbDataCsg         *message);
size_t ha_henb_data_csg__get_packed_size
                     (const HaHenbDataCsg   *message);
size_t ha_henb_data_csg__pack
                     (const HaHenbDataCsg   *message,
                      uint8_t             *out);
size_t ha_henb_data_csg__pack_to_buffer
                     (const HaHenbDataCsg   *message,
                      ProtobufCBuffer     *buffer);
HaHenbDataCsg *
       ha_henb_data_csg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_data_csg__free_unpacked
                     (HaHenbDataCsg *message,
                      ProtobufCAllocator *allocator);
/* HaHenbDataTai methods */
void   ha_henb_data_tai__init
                     (HaHenbDataTai         *message);
size_t ha_henb_data_tai__get_packed_size
                     (const HaHenbDataTai   *message);
size_t ha_henb_data_tai__pack
                     (const HaHenbDataTai   *message,
                      uint8_t             *out);
size_t ha_henb_data_tai__pack_to_buffer
                     (const HaHenbDataTai   *message,
                      ProtobufCBuffer     *buffer);
HaHenbDataTai *
       ha_henb_data_tai__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_data_tai__free_unpacked
                     (HaHenbDataTai *message,
                      ProtobufCAllocator *allocator);
/* HaUeDataCb methods */
void   ha_ue_data_cb__init
                     (HaUeDataCb         *message);
size_t ha_ue_data_cb__get_packed_size
                     (const HaUeDataCb   *message);
size_t ha_ue_data_cb__pack
                     (const HaUeDataCb   *message,
                      uint8_t             *out);
size_t ha_ue_data_cb__pack_to_buffer
                     (const HaUeDataCb   *message,
                      ProtobufCBuffer     *buffer);
HaUeDataCb *
       ha_ue_data_cb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ue_data_cb__free_unpacked
                     (HaUeDataCb *message,
                      ProtobufCAllocator *allocator);
/* HaTeDataCb methods */
void   ha_te_data_cb__init
                     (HaTeDataCb         *message);
size_t ha_te_data_cb__get_packed_size
                     (const HaTeDataCb   *message);
size_t ha_te_data_cb__pack
                     (const HaTeDataCb   *message,
                      uint8_t             *out);
size_t ha_te_data_cb__pack_to_buffer
                     (const HaTeDataCb   *message,
                      ProtobufCBuffer     *buffer);
HaTeDataCb *
       ha_te_data_cb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_te_data_cb__free_unpacked
                     (HaTeDataCb *message,
                      ProtobufCAllocator *allocator);
/* HaGtpuStat methods */
void   ha_gtpu_stat__init
                     (HaGtpuStat         *message);
size_t ha_gtpu_stat__get_packed_size
                     (const HaGtpuStat   *message);
size_t ha_gtpu_stat__pack
                     (const HaGtpuStat   *message,
                      uint8_t             *out);
size_t ha_gtpu_stat__pack_to_buffer
                     (const HaGtpuStat   *message,
                      ProtobufCBuffer     *buffer);
HaGtpuStat *
       ha_gtpu_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_gtpu_stat__free_unpacked
                     (HaGtpuStat *message,
                      ProtobufCAllocator *allocator);
/* HaX2HenbDataCb methods */
void   ha_x2_henb_data_cb__init
                     (HaX2HenbDataCb         *message);
size_t ha_x2_henb_data_cb__get_packed_size
                     (const HaX2HenbDataCb   *message);
size_t ha_x2_henb_data_cb__pack
                     (const HaX2HenbDataCb   *message,
                      uint8_t             *out);
size_t ha_x2_henb_data_cb__pack_to_buffer
                     (const HaX2HenbDataCb   *message,
                      ProtobufCBuffer     *buffer);
HaX2HenbDataCb *
       ha_x2_henb_data_cb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_x2_henb_data_cb__free_unpacked
                     (HaX2HenbDataCb *message,
                      ProtobufCAllocator *allocator);
/* HaHenbSctpRedGlbData methods */
void   ha_henb_sctp_red_glb_data__init
                     (HaHenbSctpRedGlbData         *message);
size_t ha_henb_sctp_red_glb_data__get_packed_size
                     (const HaHenbSctpRedGlbData   *message);
size_t ha_henb_sctp_red_glb_data__pack
                     (const HaHenbSctpRedGlbData   *message,
                      uint8_t             *out);
size_t ha_henb_sctp_red_glb_data__pack_to_buffer
                     (const HaHenbSctpRedGlbData   *message,
                      ProtobufCBuffer     *buffer);
HaHenbSctpRedGlbData *
       ha_henb_sctp_red_glb_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_sctp_red_glb_data__free_unpacked
                     (HaHenbSctpRedGlbData *message,
                      ProtobufCAllocator *allocator);
/* HaHenbSctpRedGlbEp methods */
void   ha_henb_sctp_red_glb_ep__init
                     (HaHenbSctpRedGlbEp         *message);
size_t ha_henb_sctp_red_glb_ep__get_packed_size
                     (const HaHenbSctpRedGlbEp   *message);
size_t ha_henb_sctp_red_glb_ep__pack
                     (const HaHenbSctpRedGlbEp   *message,
                      uint8_t             *out);
size_t ha_henb_sctp_red_glb_ep__pack_to_buffer
                     (const HaHenbSctpRedGlbEp   *message,
                      ProtobufCBuffer     *buffer);
HaHenbSctpRedGlbEp *
       ha_henb_sctp_red_glb_ep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_sctp_red_glb_ep__free_unpacked
                     (HaHenbSctpRedGlbEp *message,
                      ProtobufCAllocator *allocator);
/* HaHenbSctpRedGlbPmtu methods */
void   ha_henb_sctp_red_glb_pmtu__init
                     (HaHenbSctpRedGlbPmtu         *message);
size_t ha_henb_sctp_red_glb_pmtu__get_packed_size
                     (const HaHenbSctpRedGlbPmtu   *message);
size_t ha_henb_sctp_red_glb_pmtu__pack
                     (const HaHenbSctpRedGlbPmtu   *message,
                      uint8_t             *out);
size_t ha_henb_sctp_red_glb_pmtu__pack_to_buffer
                     (const HaHenbSctpRedGlbPmtu   *message,
                      ProtobufCBuffer     *buffer);
HaHenbSctpRedGlbPmtu *
       ha_henb_sctp_red_glb_pmtu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_sctp_red_glb_pmtu__free_unpacked
                     (HaHenbSctpRedGlbPmtu *message,
                      ProtobufCAllocator *allocator);
/* HaHenbSctpRedEpData methods */
void   ha_henb_sctp_red_ep_data__init
                     (HaHenbSctpRedEpData         *message);
size_t ha_henb_sctp_red_ep_data__get_packed_size
                     (const HaHenbSctpRedEpData   *message);
size_t ha_henb_sctp_red_ep_data__pack
                     (const HaHenbSctpRedEpData   *message,
                      uint8_t             *out);
size_t ha_henb_sctp_red_ep_data__pack_to_buffer
                     (const HaHenbSctpRedEpData   *message,
                      ProtobufCBuffer     *buffer);
HaHenbSctpRedEpData *
       ha_henb_sctp_red_ep_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_sctp_red_ep_data__free_unpacked
                     (HaHenbSctpRedEpData *message,
                      ProtobufCAllocator *allocator);
/* HaHenbSctpRedEpAssocobj methods */
void   ha_henb_sctp_red_ep_assocobj__init
                     (HaHenbSctpRedEpAssocobj         *message);
size_t ha_henb_sctp_red_ep_assocobj__get_packed_size
                     (const HaHenbSctpRedEpAssocobj   *message);
size_t ha_henb_sctp_red_ep_assocobj__pack
                     (const HaHenbSctpRedEpAssocobj   *message,
                      uint8_t             *out);
size_t ha_henb_sctp_red_ep_assocobj__pack_to_buffer
                     (const HaHenbSctpRedEpAssocobj   *message,
                      ProtobufCBuffer     *buffer);
HaHenbSctpRedEpAssocobj *
       ha_henb_sctp_red_ep_assocobj__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_henb_sctp_red_ep_assocobj__free_unpacked
                     (HaHenbSctpRedEpAssocobj *message,
                      ProtobufCAllocator *allocator);
/* HaChRowMsg methods */
void   ha_ch_row_msg__init
                     (HaChRowMsg         *message);
size_t ha_ch_row_msg__get_packed_size
                     (const HaChRowMsg   *message);
size_t ha_ch_row_msg__pack
                     (const HaChRowMsg   *message,
                      uint8_t             *out);
size_t ha_ch_row_msg__pack_to_buffer
                     (const HaChRowMsg   *message,
                      ProtobufCBuffer     *buffer);
HaChRowMsg *
       ha_ch_row_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ha_ch_row_msg__free_unpacked
                     (HaChRowMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HaIpsecStartTime_Closure)
                 (const HaIpsecStartTime *message,
                  void *closure_data);
typedef void (*HaIkePeer_Closure)
                 (const HaIkePeer *message,
                  void *closure_data);
typedef void (*HaIkeInfo_Closure)
                 (const HaIkeInfo *message,
                  void *closure_data);
typedef void (*HaIkeEpdgCtx_Closure)
                 (const HaIkeEpdgCtx *message,
                  void *closure_data);
typedef void (*HaIkeStat_Closure)
                 (const HaIkeStat *message,
                  void *closure_data);
typedef void (*HaChildInfo_Closure)
                 (const HaChildInfo *message,
                  void *closure_data);
typedef void (*HaChildKeyEx_Closure)
                 (const HaChildKeyEx *message,
                  void *closure_data);
typedef void (*HaChildStat_Closure)
                 (const HaChildStat *message,
                  void *closure_data);
typedef void (*HaSwmDiam_Closure)
                 (const HaSwmDiam *message,
                  void *closure_data);
typedef void (*HaIppool_Closure)
                 (const HaIppool *message,
                  void *closure_data);
typedef void (*HaEpdgSessionCommon_Closure)
                 (const HaEpdgSessionCommon *message,
                  void *closure_data);
typedef void (*HaEpdgSessionUe_Closure)
                 (const HaEpdgSessionUe *message,
                  void *closure_data);
typedef void (*HaEpdgSessionApnAmbr_Closure)
                 (const HaEpdgSessionApnAmbr *message,
                  void *closure_data);
typedef void (*HaEpdgBearerCommon_Closure)
                 (const HaEpdgBearerCommon *message,
                  void *closure_data);
typedef void (*HaEpdgBearerQos_Closure)
                 (const HaEpdgBearerQos *message,
                  void *closure_data);
typedef void (*HaS1mmeInstCfg_Closure)
                 (const HaS1mmeInstCfg *message,
                  void *closure_data);
typedef void (*HaS1mmeLenb_Closure)
                 (const HaS1mmeLenb *message,
                  void *closure_data);
typedef void (*HaS1mmeMmeCb_Closure)
                 (const HaS1mmeMmeCb *message,
                  void *closure_data);
typedef void (*HaS1mmeMmePlmn_Closure)
                 (const HaS1mmeMmePlmn *message,
                  void *closure_data);
typedef void (*HaS1mmeMmeMmecs_Closure)
                 (const HaS1mmeMmeMmecs *message,
                  void *closure_data);
typedef void (*HaS1mmeMmeGroupid_Closure)
                 (const HaS1mmeMmeGroupid *message,
                  void *closure_data);
typedef void (*HaS1mmeSuptdTai_Closure)
                 (const HaS1mmeSuptdTai *message,
                  void *closure_data);
typedef void (*HaS1mmeHenbCb_Closure)
                 (const HaS1mmeHenbCb *message,
                  void *closure_data);
typedef void (*HaS1mmeX2Henb_Closure)
                 (const HaS1mmeX2Henb *message,
                  void *closure_data);
typedef void (*HaS1mmeX2Enb_Closure)
                 (const HaS1mmeX2Enb *message,
                  void *closure_data);
typedef void (*HaS1mmeX2ServedCell_Closure)
                 (const HaS1mmeX2ServedCell *message,
                  void *closure_data);
typedef void (*HaS1mmeSctpRedGlbData_Closure)
                 (const HaS1mmeSctpRedGlbData *message,
                  void *closure_data);
typedef void (*HaS1mmeSctpRedGlbEp_Closure)
                 (const HaS1mmeSctpRedGlbEp *message,
                  void *closure_data);
typedef void (*HaS1mmeSctpRedGlbPmtu_Closure)
                 (const HaS1mmeSctpRedGlbPmtu *message,
                  void *closure_data);
typedef void (*HaS1mmeSctpRedEpData_Closure)
                 (const HaS1mmeSctpRedEpData *message,
                  void *closure_data);
typedef void (*HaS1mmeSctpRedEpAssocobj_Closure)
                 (const HaS1mmeSctpRedEpAssocobj *message,
                  void *closure_data);
typedef void (*HaHenbmInstCfg_Closure)
                 (const HaHenbmInstCfg *message,
                  void *closure_data);
typedef void (*HaHenbDataCb_Closure)
                 (const HaHenbDataCb *message,
                  void *closure_data);
typedef void (*HaHenbDataCsg_Closure)
                 (const HaHenbDataCsg *message,
                  void *closure_data);
typedef void (*HaHenbDataTai_Closure)
                 (const HaHenbDataTai *message,
                  void *closure_data);
typedef void (*HaUeDataCb_Closure)
                 (const HaUeDataCb *message,
                  void *closure_data);
typedef void (*HaTeDataCb_Closure)
                 (const HaTeDataCb *message,
                  void *closure_data);
typedef void (*HaGtpuStat_Closure)
                 (const HaGtpuStat *message,
                  void *closure_data);
typedef void (*HaX2HenbDataCb_Closure)
                 (const HaX2HenbDataCb *message,
                  void *closure_data);
typedef void (*HaHenbSctpRedGlbData_Closure)
                 (const HaHenbSctpRedGlbData *message,
                  void *closure_data);
typedef void (*HaHenbSctpRedGlbEp_Closure)
                 (const HaHenbSctpRedGlbEp *message,
                  void *closure_data);
typedef void (*HaHenbSctpRedGlbPmtu_Closure)
                 (const HaHenbSctpRedGlbPmtu *message,
                  void *closure_data);
typedef void (*HaHenbSctpRedEpData_Closure)
                 (const HaHenbSctpRedEpData *message,
                  void *closure_data);
typedef void (*HaHenbSctpRedEpAssocobj_Closure)
                 (const HaHenbSctpRedEpAssocobj *message,
                  void *closure_data);
typedef void (*HaChRowMsg_Closure)
                 (const HaChRowMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ha_ipsec_start_time__descriptor;
extern const ProtobufCMessageDescriptor ha_ike_peer__descriptor;
extern const ProtobufCMessageDescriptor ha_ike_info__descriptor;
extern const ProtobufCMessageDescriptor ha_ike_epdg_ctx__descriptor;
extern const ProtobufCMessageDescriptor ha_ike_stat__descriptor;
extern const ProtobufCMessageDescriptor ha_child_info__descriptor;
extern const ProtobufCMessageDescriptor ha_child_key_ex__descriptor;
extern const ProtobufCMessageDescriptor ha_child_stat__descriptor;
extern const ProtobufCMessageDescriptor ha_swm_diam__descriptor;
extern const ProtobufCMessageDescriptor ha_ippool__descriptor;
extern const ProtobufCMessageDescriptor ha_epdg_session_common__descriptor;
extern const ProtobufCMessageDescriptor ha_epdg_session_ue__descriptor;
extern const ProtobufCMessageDescriptor ha_epdg_session_apn_ambr__descriptor;
extern const ProtobufCMessageDescriptor ha_epdg_bearer_common__descriptor;
extern const ProtobufCMessageDescriptor ha_epdg_bearer_qos__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_inst_cfg__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_lenb__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_mme_cb__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_mme_plmn__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_mme_mmecs__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_mme_groupid__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_suptd_tai__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_henb_cb__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_x2_henb__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_x2_enb__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_x2_served_cell__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_sctp_red_glb_data__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_sctp_red_glb_ep__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_sctp_red_glb_pmtu__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_sctp_red_ep_data__descriptor;
extern const ProtobufCMessageDescriptor ha_s1mme_sctp_red_ep_assocobj__descriptor;
extern const ProtobufCMessageDescriptor ha_henbm_inst_cfg__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_data_cb__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_data_csg__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_data_tai__descriptor;
extern const ProtobufCMessageDescriptor ha_ue_data_cb__descriptor;
extern const ProtobufCMessageDescriptor ha_te_data_cb__descriptor;
extern const ProtobufCMessageDescriptor ha_gtpu_stat__descriptor;
extern const ProtobufCMessageDescriptor ha_x2_henb_data_cb__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_sctp_red_glb_data__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_sctp_red_glb_ep__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_sctp_red_glb_pmtu__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_sctp_red_ep_data__descriptor;
extern const ProtobufCMessageDescriptor ha_henb_sctp_red_ep_assocobj__descriptor;
extern const ProtobufCMessageDescriptor ha_ch_row_msg__descriptor;
extern const ProtobufCEnumDescriptor    ha_ch_row_msg__event__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_record_5fha_2eproto__INCLUDED */
